//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.IBLL;
using Apps.IDAL;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.Models.JOB;
namespace Apps.BLL
{
	public class Virtual_JOB_TASKJOBSBLL
	{
        [Dependency]
        public IJOB_TASKJOBSRepository m_Rep { get; set; }

		public virtual List<JOB_TASKJOBSModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<JOB_TASKJOBS> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.sno.Contains(queryStr)
								|| a.taskName.Contains(queryStr)
								|| a.Id.Contains(queryStr)
								|| a.taskTitle.Contains(queryStr)
								|| a.taskCmd.Contains(queryStr)
								
								
								|| a.creator.Contains(queryStr)
								|| a.procName.Contains(queryStr)
								|| a.procParams.Contains(queryStr)
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<JOB_TASKJOBSModel> CreateModelList(ref IQueryable<JOB_TASKJOBS> queryData)
        {

            List<JOB_TASKJOBSModel> modelList = (from r in queryData
                                              select new JOB_TASKJOBSModel
                                              {
													sno = r.sno,
													taskName = r.taskName,
													Id = r.Id,
													taskTitle = r.taskTitle,
													taskCmd = r.taskCmd,
													crtDt = r.crtDt,
													state = r.state,
													creator = r.creator,
													procName = r.procName,
													procParams = r.procParams,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, JOB_TASKJOBSModel model)
        {
            try
            {
                JOB_TASKJOBS entity = m_Rep.GetById(model.sno);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new JOB_TASKJOBS();
               				entity.sno = model.sno;
				entity.taskName = model.taskName;
				entity.Id = model.Id;
				entity.taskTitle = model.taskTitle;
				entity.taskCmd = model.taskCmd;
				entity.crtDt = model.crtDt;
				entity.state = model.state;
				entity.creator = model.creator;
				entity.procName = model.procName;
				entity.procParams = model.procParams;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, JOB_TASKJOBSModel model)
        {
            try
            {
                JOB_TASKJOBS entity = m_Rep.GetById(model.sno);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.sno = model.sno;
				entity.taskName = model.taskName;
				entity.Id = model.Id;
				entity.taskTitle = model.taskTitle;
				entity.taskCmd = model.taskCmd;
				entity.crtDt = model.crtDt;
				entity.state = model.state;
				entity.creator = model.creator;
				entity.procName = model.procName;
				entity.procParams = model.procParams;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual JOB_TASKJOBSModel GetById(string id)
        {
            if (IsExists(id))
            {
                JOB_TASKJOBS entity = m_Rep.GetById(id);
                JOB_TASKJOBSModel model = new JOB_TASKJOBSModel();
                              				model.sno = entity.sno;
				model.taskName = entity.taskName;
				model.Id = entity.Id;
				model.taskTitle = entity.taskTitle;
				model.taskCmd = entity.taskCmd;
				model.crtDt = entity.crtDt;
				model.state = entity.state;
				model.creator = entity.creator;
				model.procName = entity.procName;
				model.procParams = entity.procParams;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
}
