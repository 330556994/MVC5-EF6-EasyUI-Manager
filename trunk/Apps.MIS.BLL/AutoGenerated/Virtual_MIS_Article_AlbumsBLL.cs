//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.MIS.IDAL;
using Apps.Models.MIS;
namespace Apps.MIS.BLL
{
	public class Virtual_MIS_Article_AlbumsBLL
	{
        [Dependency]
        public IMIS_Article_AlbumsRepository m_Rep { get; set; }

		public virtual List<MIS_Article_AlbumsModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<MIS_Article_Albums> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.Id.Contains(queryStr)
								|| a.ArticleId.Contains(queryStr)
								|| a.BigImg.Contains(queryStr)
								|| a.SmallImg.Contains(queryStr)
								|| a.Remark.Contains(queryStr)
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<MIS_Article_AlbumsModel> CreateModelList(ref IQueryable<MIS_Article_Albums> queryData)
        {

            List<MIS_Article_AlbumsModel> modelList = (from r in queryData
                                              select new MIS_Article_AlbumsModel
                                              {
													Id = r.Id,
													ArticleId = r.ArticleId,
													BigImg = r.BigImg,
													SmallImg = r.SmallImg,
													Remark = r.Remark,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, MIS_Article_AlbumsModel model)
        {
            try
            {
                MIS_Article_Albums entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new MIS_Article_Albums();
               				entity.Id = model.Id;
				entity.ArticleId = model.ArticleId;
				entity.BigImg = model.BigImg;
				entity.SmallImg = model.SmallImg;
				entity.Remark = model.Remark;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, MIS_Article_AlbumsModel model)
        {
            try
            {
                MIS_Article_Albums entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.ArticleId = model.ArticleId;
				entity.BigImg = model.BigImg;
				entity.SmallImg = model.SmallImg;
				entity.Remark = model.Remark;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual MIS_Article_AlbumsModel GetById(string id)
        {
            if (IsExists(id))
            {
                MIS_Article_Albums entity = m_Rep.GetById(id);
                MIS_Article_AlbumsModel model = new MIS_Article_AlbumsModel();
                              				model.Id = entity.Id;
				model.ArticleId = entity.ArticleId;
				model.BigImg = entity.BigImg;
				model.SmallImg = entity.SmallImg;
				model.Remark = entity.Remark;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
}
