<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.AspNet.SignalR.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.AspNet.SignalR.AuthorizeAttribute">
      <summary>应用于集线器和集线器方法，以授权客户端连接到集线器并授权客户端调用集线器方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.AuthorizeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.AuthorizeAttribute._requireOutgoing">
      <summary>指定是否仅对任何集线器服务器端方法的调用应用授权。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>确定客户端是否有权连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</summary>
      <returns>如果调用方有权连接到集线器，则为 true；否则为 false。</returns>
      <param name="hubDescriptor">尝试进行连接的集线器客户端的描述。</param>
      <param name="request">来自客户端的（重新）连接请求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>确定客户端是否有权调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 方法。</summary>
      <returns>如果调用方有权调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 方法，则为 true；否则为 false。</returns>
      <param name="hubIncomingInvokerContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" />，提供有关 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 方法调用的详细信息。</param>
      <param name="appliesToMethod">要指示接口实例是直接应用到方法的特性，则为 true；否则为 false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.RequireOutgoing">
      <summary>设置为 false 可仅对任何集线器服务器端方法的调用应用授权。此属性只影响应用于集线器类的特性。无法读取此属性。</summary>
      <returns>如果仅对任何集线器服务器端方法的调用应用授权，则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Roles">
      <summary>获取或设置用户角色。</summary>
      <returns>用户角色。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.UserAuthorized(System.Security.Principal.IPrincipal)">
      <summary>重写时，提供一个入口点用于进行自定义授权检查。由 <see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)" /> 和 <see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)" /> 调用。</summary>
      <returns>如果用户已经过授权，则为 true；否则为 false。</returns>
      <param name="user">被授权的客户端的 <see cref="T:System.Security.Principal.IPrincipal" />。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Users">
      <summary>获取或设置授权用户。</summary>
      <returns>授权用户。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionConfiguration">
      <summary>表示连接配置。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionConfiguration.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.EnableJSONP">
      <summary>获取或设置一个布尔值，该值确定是否启用 JSONP。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.Resolver">
      <summary>获取或设置要用于集线器连接的依赖关系解析程序。</summary>
      <returns>要用于集线器连接的依赖关系解析程序。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionExtensions">
      <summary>提供扩展方法，用于将消息发送到订阅特定信号的所有连接。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Broadcast(Microsoft.AspNet.SignalR.IConnection,System.Object,System.String[])">
      <summary>将值广播到所有连接，指定的连接 ID 除外。</summary>
      <returns>表示广播何时完成的任务。</returns>
      <param name="connection">连接。</param>
      <param name="value">要广播的值。</param>
      <param name="excludeConnectionIds">要在广播中排除的连接 ID 的列表。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.Collections.Generic.IList{System.String},System.Object)">
      <summary>将消息发送到订阅了指定信号的所有连接。信号的示例可以是特定连接 ID。</summary>
      <returns>表示广播何时完成的任务。</returns>
      <param name="connection">连接</param>
      <param name="connectionIds">要发送到的连接 ID。</param>
      <param name="value">要发布的值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.String,System.Object)">
      <summary>将消息发送到订阅了指定信号的所有连接。信号的示例可以是特定连接 ID。</summary>
      <returns>表示广播何时完成的任务。</returns>
      <param name="connection">连接</param>
      <param name="connectionId">要发送到的 connectionId。</param>
      <param name="value">要发布的值。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionMessage">
      <summary>发送到一个或多个连接的消息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" /> 类的新实例。</summary>
      <param name="signal">信号。</param>
      <param name="value">消息的负载。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object,System.Collections.Generic.IList{System.String})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" /> 类的新实例。</summary>
      <param name="signal">信号。</param>
      <param name="value">消息的负载。</param>
      <param name="excludedSignals">要排除的信号。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.ExcludedSignals">
      <summary>表示信号的列表，这些信号应该用于筛选哪些连接接收此消息。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signal">
      <summary>应向其发送此消息的信号。已订阅此信号的连接将接收消息负载。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signals">
      <summary>应将此消息传送到的信号的列表。如果使用此项，则不能使用 Signal。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Value">
      <summary>消息的负载。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Cookie">
      <summary>表示 SignalR 的 Cookie。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Cookie" /> 类的新实例。</summary>
      <param name="name">Cookie 的属性名称。</param>
      <param name="value">Cookie 的属性值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Cookie" /> 类的新实例。</summary>
      <param name="name">Cookie 的属性名称。</param>
      <param name="value">Cookie 的属性值。</param>
      <param name="domain">Cookie 的域属性。</param>
      <param name="path">Cookie 的属性路径。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Domain">
      <summary>获取或设置 Cookie 的域。</summary>
      <returns>Cookie 的域。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Name">
      <summary>获取或设置 Cookie 的名称。</summary>
      <returns>Cookie 的名称。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Path">
      <summary>获取或设置 Cookie 的路径。</summary>
      <returns>Cookie 的路径。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Value">
      <summary>获取或设置 Cookie 的值。</summary>
      <returns>Cookie 的值。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver">
      <summary>表示具有默认行为的依赖关系解析程序。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose">
      <summary>释放 <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> 类的当前实例使用的非托管资源，并有选择性地释放托管资源。</summary>
      <param name="disposing">若为 true，则同时释放托管资源和非托管资源；若为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetService(System.Type)">
      <summary>解析支持任意对象创建的一次注册的服务。</summary>
      <returns>请求的服务或对象。</returns>
      <param name="serviceType">所请求的服务或对象的类型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetServices(System.Type)">
      <summary>解析多次注册的服务。</summary>
      <returns>请求的服务。</returns>
      <param name="serviceType">所请求的服务的类型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>将指定的服务注册到依赖关系解析程序。</summary>
      <param name="serviceType">要注册的服务的类型。</param>
      <param name="activators">要注册到依赖关系解析程序的服务。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>将指定的服务注册到依赖关系解析程序。</summary>
      <param name="serviceType">要注册的服务的类型。</param>
      <param name="activator">要注册到依赖关系解析程序的服务。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>解析扩展的类型。</summary>
      <returns>返回对象来解析扩展的类型。</returns>
      <param name="resolver">依赖关系解析程序。</param>
      <typeparam name="T">要解析的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>解析扩展的类型。</summary>
      <returns>返回对象来解析扩展的类型。</returns>
      <param name="resolver">依赖关系解析程序。</param>
      <param name="type">要解析的类型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>解析所有扩展的类型。</summary>
      <returns>返回解析类型扩展的集合。</returns>
      <param name="resolver">依赖关系解析程序。</param>
      <typeparam name="T">要解析的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>解析所有扩展的类型。</summary>
      <returns>返回解析类型扩展的集合。</returns>
      <param name="resolver">依赖关系解析程序。</param>
      <param name="type">要解析的类型。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GlobalHost">
      <summary>提供对默认主机信息的访问。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.Configuration">
      <summary>获取默认的 <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" />。</summary>
      <returns>默认的 <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.ConnectionManager">
      <summary>获取默认的 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" />。</summary>
      <returns>默认的 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.DependencyResolver">
      <summary>获取或设置默认 <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</summary>
      <returns>默认的 <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.HubPipeline">
      <summary>获取默认的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />。</summary>
      <returns>默认的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.TraceManager">
      <summary>获取默认 <see cref="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager" /></summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GroupManager">
      <summary>管理连接的组。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.#ctor(Microsoft.AspNet.SignalR.IConnection,System.String)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.GroupManager" /> 类的新实例。</summary>
      <param name="connection">此组驻留的 <see cref="T:Microsoft.AspNet.SignalR.IConnection" />。</param>
      <param name="groupPrefix">此组的前缀。<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 名称或 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 类型名称。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Add(System.String,System.String)">
      <summary>将连接添加到指定的组。</summary>
      <returns>表示要添加到组中的连接 ID 的任务。</returns>
      <param name="connectionId">要添加到组中的连接 ID。</param>
      <param name="groupName">组的名称</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Remove(System.String,System.String)">
      <summary>从指定的组中删除连接。</summary>
      <returns>表示要从组中删除的连接 ID 的任务。</returns>
      <param name="connectionId">要从组中删除的连接 ID。</param>
      <param name="groupName">组的名称</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>将值发送到指定的组。</summary>
      <returns>表示发送何时完成的任务。</returns>
      <param name="groupNames">组的名称。</param>
      <param name="value">要发送的值。</param>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.String,System.Object,System.String[])">
      <summary>将值发送到指定的组。</summary>
      <returns>表示发送何时完成的任务。</returns>
      <param name="groupName">组的名称。</param>
      <param name="value">要发送的值。</param>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hub">
      <summary>提供与连接到 <see cref="T:Microsoft.AspNet.SignalR.Hub" /> 的 SignalR 连接进行通信的方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hub" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Clients">
      <summary>获取或设置与 SignalR 连接通信的客户端。</summary>
      <returns>与 SignalR 连接通信的客户端。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Context">
      <summary>获取或设置有关调用客户端的信息。</summary>
      <returns>有关调用客户端的信息。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose">
      <summary>释放此实例使用的所有资源。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
      <summary>释放此实例使用的所有资源。</summary>
      <param name="disposing">如果要释放托管和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Groups">
      <summary>获取或设置此集线器实例的组管理器。</summary>
      <returns>此集线器实例的组管理器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnConnected">
      <summary>当连接连接到此集线器实例时发生。</summary>
      <returns>操作结果。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnDisconnected">
      <summary>当从此集线器实例断开连接时发生。</summary>
      <returns>操作结果。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnReconnected">
      <summary>当连接重新连接到此集线器实例时发生。</summary>
      <returns>操作结果。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubConfiguration">
      <summary>表示集线器配置。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubConfiguration.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors">
      <summary>确定是否将集线器方法中引发的详细异常报告回调用客户端。默认为 false。</summary>
      <returns>如果要将集线器方法中引发的详细异常报告回调用客户端，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableJavaScriptProxies">
      <summary>确定是否应在 {路径}/hubs 自动生成用于服务器端集线器的 JavaScript 代理。默认为 true。</summary>
      <returns>如果应在 {路径}/hubs 中自动生成用于服务器端集线器的 JavaScript 代理，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubException"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String,System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.HubException.ErrorData"></member>
    <member name="T:Microsoft.AspNet.SignalR.HubPipelineExtensions">
      <summary>提供用于向数据类型添加自定义功能的扩展方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubPipelineExtensions.RequireAuthentication(Microsoft.AspNet.SignalR.Hubs.IHubPipeline)">
      <summary>需要进行身份验证时，会向 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 中添加一个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" />，前者具有将全局应用于所有集线器和集线器方法的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection" /> 和 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation" /> 授权者。这些授权者要求将 <see cref="T:System.Security.Principal.IPrincipal" /> 的 <see cref="T:System.Security.Principal.IIdentity" /> IsAuthenticated 用于调用服务器端集线器方法或接收客户端集线器方法调用的任何客户端。</summary>
      <param name="pipeline">将向其中添加 <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> 的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnection">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 及其连接的信道。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IConnection.DefaultSignal">
      <summary>此连接的主要信号。这是 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的主要 signalr。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>将消息发送到订阅了信号的连接。</summary>
      <returns>返回消息何时已发送的任务。</returns>
      <param name="message">要发送的消息。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnectionGroupManager">
      <summary>管理连接的组，并允许将消息发送到组。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>将值发送到指定的组。</summary>
      <returns>表示发送何时完成的任务。</returns>
      <param name="groupNames">组的名称。</param>
      <param name="value">要发送的值。</param>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.String,System.Object,System.String[])">
      <summary>将值发送到指定的组。</summary>
      <returns>表示发送何时完成的任务。</returns>
      <param name="groupName">组的名称。</param>
      <param name="value">要发送的值。</param>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IDependencyResolver">
      <summary>提供表示 SignalR 的依赖关系解析程序的接口。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetService(System.Type)">
      <summary>返回给定类型的服务。</summary>
      <returns>返回的服务。</returns>
      <param name="serviceType">要返回的服务的类型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetServices(System.Type)">
      <summary>返回给定类型的服务。</summary>
      <returns>返回的服务。</returns>
      <param name="serviceType">要返回的服务的类型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>注册指定类型的一组服务。</summary>
      <param name="serviceType">要注册的服务的类型。</param>
      <param name="activators">函数委托列表，该委托接受表示要激活的服务的参数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>注册指定类型的服务。</summary>
      <param name="serviceType">要注册的服务的类型。</param>
      <param name="activator">一个函数委托，该委托接受表示要激活的服务的参数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IGroupManager">
      <summary>管理连接的组。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Add(System.String,System.String)">
      <summary>将连接添加到指定的组。</summary>
      <returns>表示要添加到组中的连接 ID 的任务。</returns>
      <param name="connectionId">要添加到组中的连接 ID。</param>
      <param name="groupName">组的名称</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Remove(System.String,System.String)">
      <summary>从指定的组中删除连接。</summary>
      <returns>表示要从组中删除的连接 ID 的任务。</returns>
      <param name="connectionId">要从组中删除的连接 ID。</param>
      <param name="groupName">组的名称</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IHubContext">
      <summary>提供对有关 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的信息的访问。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Clients">
      <summary>封装有关 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 SignalR 连接的所有信息。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Groups">
      <summary>获取集线器的 <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" />。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" />。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext">
      <summary>提供对有关 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的信息的访问。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Connection">
      <summary>获取 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IConnection" />。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Groups">
      <summary>获取 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IConnectionGroupManager" />。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IRequest">
      <summary>表示 SignalR 请求。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Cookies">
      <summary>获取客户端连接的 Cookie。</summary>
      <returns>客户端连接的 Cookie。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Environment">
      <summary>获取 owin 环境。</summary>
      <returns>owin 环境。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Headers">
      <summary>获取或设置请求的标头。</summary>
      <returns>请求的标头。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.LocalPath">
      <summary>获取 URL 的本地路径部分。</summary>
      <returns>URL 的本地路径部分。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.QueryString">
      <summary>获取 IRequest 查询字符串变量的集合。</summary>
      <returns>IRequest 查询字符串变量的集合。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IRequest.ReadForm">
      <summary>读取 http 请求的格式。</summary>
      <returns>要读取的 http 请求格式。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Url">
      <summary>获取 IRequest 的 URI。</summary>
      <returns>IRequest 的 URI。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.User">
      <summary>获取 IRequest 的主体用户。</summary>
      <returns>IRequest 的主体用户。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.IUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.PersistentConnection">
      <summary> 表示客户端和服务器之间的连接。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.AckHandler">
      <summary>获取或设置此连接的 Ack 处理程序。</summary>
      <returns>此连接的 Ack 处理程序。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Authorize(Microsoft.AspNet.SignalR.IRequest)">
      <summary>确定是否已授权此连接。</summary>
      <returns>如果连接已获得授权，则为 true；否则为 false。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>确定是否授权连接请求。</summary>
      <returns>如果连接的请求已获得授权，则为 true；否则为 false。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Connection">
      <summary>获取或设置连接。</summary>
      <returns>连接。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Counters">
      <summary>获取或设置性能计数器管理器。</summary>
      <returns>性能计数器管理器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.GetSignals(System.String,System.String)">
      <summary>返回 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 中使用的信号。</summary>
      <returns>用于此 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的信号。</returns>
      <param name="userId">当前连接的用户 ID。</param>
      <param name="connectionId">传入连接的 ID。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Groups">
      <summary>获取或设置连接组。</summary>
      <returns>连接组。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.JsonSerializer">
      <summary>获取或设置 JSON 序列化程序。</summary>
      <returns>JSON 序列化程序。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.MessageBus">
      <summary>获取或设置连接的消息总线。</summary>
      <returns>连接的消息总线。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>建立新连接时调用。</summary>
      <returns>连接操作完成时将完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">当前连接的请求。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>连接断开时调用。</summary>
      <returns>断开连接操作完成时将完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">当前连接的请求。</param>
      <param name="connectionId">断开连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>从连接接收数据时调用。</summary>
      <returns>接收操作完成时将完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">当前连接的请求。</param>
      <param name="connectionId">发送数据的连接的 ID。</param>
      <param name="data">发送到连接的负载。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>连接超时后重新连接时调用。</summary>
      <returns>重新连接操作完成时将完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="request">当前连接的请求。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>连接超时后重新连接时调用以确定应重新加入哪些组。</summary>
      <returns>重新连接时应加入的组名集合。</returns>
      <param name="request">当前连接的请求。</param>
      <param name="groups">进行调用的连接声明是其一部分的组。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>处理 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的所有请求。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 管道完成时将完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="context">当前请求的 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />。</param>
      <exception cref="InvalidOperationException">连接未初始化时引发。未指定传输时引发。未指定连接 ID 时引发。</exception>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>OWIN 入口点。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.ProtectedData">
      <summary>获取或设置此连接的受保护数据。</summary>
      <returns>此连接的受保护数据。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Trace">
      <summary>获取连接的源。</summary>
      <returns>连接的源。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.TraceManager">
      <summary>获取或设置跟踪管理器。</summary>
      <returns>跟踪管理器。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Transport">
      <summary>获取或设置与此连接关联的传输。</summary>
      <returns>与此连接关联的传输。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.UserIdProvider"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager">
      <summary>提供对服务器默认配置管理器的访问。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.ConnectionTimeout">
      <summary>获取或设置一个 TimeSpan，用于表示连接在超时之前保持打开状态的时间。</summary>
      <returns>一个 TimeSpan，用于表示连接在超时之前保持打开状态的时间。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DefaultMessageBufferSize">
      <summary>获取或设置要为特定信号缓冲的消息数量。</summary>
      <returns>要为特定信号缓冲的消息数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DisconnectTimeout">
      <summary>获取或设置一个 TimeSpan，用于表示在连接停止之后引发断开连接事件之前要等待的时间。</summary>
      <returns>一个 TimeSpan，用于表示在连接停止之后引发断开连接事件之前要等待的时间。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.KeepAlive">
      <summary>获取或设置一个 TimeSpan，用于表示两次发送保持活动消息之间的时间。如果启用，此值必须至少为两秒。设置为 null 可禁用。</summary>
      <returns>一个 TimeSpan，用于表示两次发送保持活动消息之间的时间。如果启用，此值必须至少为两秒。设置为 null 可禁用。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.LongPollDelay"></member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.TransportConnectTimeout"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager">
      <summary>提供对服务器配置的访问。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.ConnectionTimeout">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，该值表示连接在超时之前保持打开状态的时间长度。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，用于表示连接在超时之前保持打开状态的时间。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DefaultMessageBufferSize">
      <summary>获取或设置要为特定信号缓冲的消息数量。</summary>
      <returns>要为特定信号缓冲的消息数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DisconnectTimeout">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，该值表示在连接停止之后引发断开连接事件之前要等待的时间长度。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，用于表示在连接停止之后引发断开连接事件之前要等待的时间。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.KeepAlive">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，该值表示两次发送保持活动消息之间的时间长度。如果启用，此值必须至少为两秒。设置为 null 可禁用。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，用于表示两次发送保持活动消息之间的时间。如果启用，此值必须至少为两秒。设置为 null 可禁用。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.LongPollDelay">
      <summary>获取或设置要告知客户端在从服务器发送数据后重新建立长轮询连接之前等待的 <see cref="T:System.TimeSpan" />。默认值为 0。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.TransportConnectTimeout">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，该值表示客户端在转而使用其他传输或连接失败之前应允许连接的时间。默认值为 5 秒。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostContext">
      <summary>表示 SignalR 主机的上下文。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(Microsoft.AspNet.SignalR.IRequest,Microsoft.AspNet.SignalR.Hosting.IResponse)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> 类的新实例。</summary>
      <param name="environment">SignalR 主机的环境。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Environment">
      <summary>获取 SignalR 主机的环境。</summary>
      <returns>SignalR 主机的环境。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Request"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Response"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions">
      <summary>表示依赖关系解析程序扩展的主机。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions.InitializeHost(Microsoft.AspNet.SignalR.IDependencyResolver,System.String,System.Threading.CancellationToken)">
      <summary>初始化依赖关系解析程序扩展的主机。</summary>
      <param name="resolver">IDependencyResolver。</param>
      <param name="instanceName">实例名称。</param>
      <param name="hostShutdownToken">主机关闭令牌。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.INameValueCollection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Get(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.GetValues(System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Item(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.IResponse">
      <summary>表示与客户端的连接。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.CancellationToken">
      <summary>获取表示客户端生存期的取消标记。</summary>
      <returns>表示客户端生存期的取消令牌。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.ContentType">
      <summary>获取或设置响应的内容类型。</summary>
      <returns>响应的内容类型。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Flush">
      <summary>将缓冲的响应刷新到客户端。</summary>
      <returns>表示何时刷新过数据的任务。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Write(System.ArraySegment{System.Byte})">
      <summary>写入缓冲的数据。</summary>
      <param name="data">要写入到缓冲区的数据。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory">
      <summary>负责创建 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>创建 <see cref="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory" /> 类的新实例。</summary>
      <param name="resolver">创建 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 时要使用的依赖关系解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.CreateInstance(System.Type)">
      <summary>使用依赖关系解析程序或类型的默认构造函数创建指定类型的实例。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的实例。</returns>
      <param name="connectionType">要创建的 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" /> 的扩展方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions.End(Microsoft.AspNet.SignalR.Hosting.IResponse,System.String)">
      <summary>使用可选数据关闭与客户端的连接。</summary>
      <returns>表示连接何时关闭的任务。</returns>
      <param name="response">
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" />。</param>
      <param name="data">要写入到连接的数据。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule">
      <summary>应用 <see cref="T:Microsoft.AspNet.SignalR.Hub" /> 类中的授权特性，以确定是否允许客户端接收从集线器发送的消息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor(Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection,Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> 类的新实例。</summary>
      <param name="globalConnectionAuthorizer">全局连接授权者。</param>
      <param name="globalInvocationAuthorizer">全局调用授权者。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>包装一个函数，该函数将在客户端订阅属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所描述的集线器的信号之前调用。默认情况下，<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> 将在集线器上查找特性，这有助于确定客户端是否有权订阅所描述集线器的方法调用。如果客户端有权订阅客户端集线器方法调用，则该函数返回 true；否则返回 false。</summary>
      <returns>一个已包装的函数，用于指示客户端是否有权连接到所描述的集线器。</returns>
      <param name="authorizeConnect">一个函数，用于指示客户端是否有权连接到所描述的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>包装用于调用服务器端集线器方法的函数。即使尚未授权客户端连接到某一集线器，客户端也有权调用该集线器的服务器端方法，除非通过不执行调用参数在 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> 中阻止调用。</summary>
      <returns>用于调用服务器端集线器方法的已包装函数。</returns>
      <param name="invoke">用于调用服务器端集线器方法的函数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation">
      <summary>描述客户端集线器方法调用。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Args">
      <summary>获取或设置调用客户端集线器方法时将使用的参数列表。</summary>
      <returns>与客户端集线器方法关联的参数列表。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Hub">
      <summary>获取或设置被调用方法所属的集线器的名称。</summary>
      <returns>被调用方法所属的集线器的名称。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Method">
      <summary>获取或设置要调用的客户端集线器方法的名称。</summary>
      <returns>被调用的客户端集线器方法的名称。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.State">
      <summary>获取或设置表示自上次将集线器状态发送到客户端以来已更改的服务器上的集线器状态的键/值存储。</summary>
      <returns>表示服务器上的集线器状态的键/值存储。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy">
      <summary>表示客户端集线器的服务器端代理。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])">
      <summary>调用由 <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy" /> 实例表示的连接的方法。</summary>
      <returns>表示数据何时已发送到客户端的任务。</returns>
      <param name="method">要调用的方法的名称。</param>
      <param name="args">要传递给客户端的参数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>执行 <see cref="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])" /> 方法。</summary>
      <returns>始终为 true。</returns>
      <param name="binder">包含绑定语义和客户端集线器操作详细信息的信息。</param>
      <param name="args">在调用操作期间传递给对象成员的参数。</param>
      <param name="result">当方法返回时，包含成员调用的结果。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy">
      <summary>表示客户端集线器的连接 ID 代理。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String[])"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator">
      <summary>表示默认的程序集定位器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.GetAssemblies">
      <summary>获取已加载到当前应用程序域中的程序集。</summary>
      <returns>当前应用程序域中的程序集数组。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator">
      <summary>表示 SignalR 集线器的默认激活器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator" /> 类的新实例。</summary>
      <param name="resolver">依赖关系解析程序</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>创建新的集线器激活器。</summary>
      <returns>创建的集线器激活器。</returns>
      <param name="descriptor">描述符。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager">
      <summary>表示默认的集线器管理器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager" /> 类的新实例。</summary>
      <param name="resolver">集线器解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHub(System.String)">
      <summary>检索单个集线器描述符。</summary>
      <returns>如果找到，则为集线器描述符；否则为 null。</returns>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>在给定集线器上检索具有给定名称的方法。</summary>
      <returns>如果找到，则为该方法的描述符；否则为 null。</returns>
      <param name="hubName">集线器的名称。</param>
      <param name="method">要查找的方法的名称。</param>
      <param name="parameters">要匹配的方法参数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>获取可对给定集线器调用的所有方法。</summary>
      <returns>可用方法的列表。</returns>
      <param name="hubName">集线器的名称。</param>
      <param name="predicate">用于筛选结果的可选谓词。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>检索与给定谓词匹配的所有可用集线器。</summary>
      <returns>集线器描述符的列表。</returns>
      <param name="predicate">谓词。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHub(System.String)">
      <summary>将给定集线器名称解析为一个具体的对象。</summary>
      <returns>如果找到，则为集线器实现实例；否则为 null。</returns>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHubs">
      <summary>将所有可用集线器解析为其具体对象。</summary>
      <returns>集线器实例的列表。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator">
      <summary>表示默认 Javascript 代理的生成器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubManager,Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" /> 类的新实例。</summary>
      <param name="manager">集线器管理器。</param>
      <param name="javaScriptMinifier">javascript 缩减程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" /> 类的新实例。</summary>
      <param name="resolver">依赖关系解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>生成指定的代理。</summary>
      <returns>生成的代理。</returns>
      <param name="serviceUrl">服务 URL。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String,System.Boolean)">
      <summary>生成指定的代理。</summary>
      <returns>生成的代理。</returns>
      <param name="serviceUrl">服务 URL。</param>
      <param name="includeDocComments">若要包括 Doc 注释，则为 true；否则为 false。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver">
      <summary>表示集线器参数的默认解析程序。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>基于提供的对象解析方法参数值。</summary>
      <returns>参数值的数组。</returns>
      <param name="method">方法描述符。</param>
      <param name="values">要从中解析参数值的值的列表。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveParameter(Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor,Microsoft.AspNet.SignalR.Json.IJsonValue)">
      <summary>基于提供的对象解析参数值。</summary>
      <returns>参数值。</returns>
      <param name="descriptor">参数描述符。</param>
      <param name="value">要从中解析参数值的值。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.Descriptor">
      <summary>描述集线器的信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.Descriptor.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.Descriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.Name">
      <summary>获取或设置集线器名称。</summary>
      <returns>集线器名称。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.NameSpecified">
      <summary>获取或设置一个值，该值指示是否指定了集线器特性名称。</summary>
      <returns>如果指定了集线器特性名称，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary">
      <summary>包含用于存储键/值对的字典对象，并重写 TrySetMember 和 TryGetMember 方法以支持新语法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary" /> 类的新实例。</summary>
      <param name="obj">字典对象。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将指定的键/值对对象添加到字典。</summary>
      <param name="item">要添加的键/值对对象。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.String,System.Object)">
      <summary>将指定的键和值添加到字典。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Clear">
      <summary>从字典中删除所有键和值。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定字典是否包含特定的键/值对项。</summary>
      <returns>如果字典包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="item">要在字典中查找的键/值对项。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.ContainsKey(System.String)">
      <summary>确定字典是否包含指定的键。</summary>
      <returns>如果字典包含指定的键，则为 true；否则为 false。</returns>
      <param name="key">要在字典中查找的键。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>从指定的数组索引处开始，将键/值对元素复制到现有的一维数组中。</summary>
      <param name="array">一维数组，用作从字典中复制的元素的目标。</param>
      <param name="arrayIndex">数组中从零开始的索引，将从此位置开始复制。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Count">
      <summary>获取字典中的项数。</summary>
      <returns>字典中的项数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.GetEnumerator">
      <summary>返回一个循环访问字典的枚举器。</summary>
      <returns>循环访问字典的枚举器。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.IsReadOnly">
      <summary>获取动态字典是否为只读。</summary>
      <returns>如果动态字典为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Item(System.String)">
      <summary>获取或设置字典中具有特定键的项。</summary>
      <returns>字典中具有特定键的项。</returns>
      <param name="key">项的键。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Keys">
      <summary>获取字典中包含的键集合。</summary>
      <returns>字典中包含的键集合。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从字典中删除指定的键/值对项。</summary>
      <returns>已在其中删除了项的字典。</returns>
      <param name="item">要删除的项。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.String)">
      <summary>从字典中删除特定的键。</summary>
      <returns>已在其中删除了键的字典。</returns>
      <param name="key">要删除的键。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举器。</summary>
      <returns>循环访问集合的枚举器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>提供用于获取成员值的操作的实现。</summary>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <param name="binder">提供有关调用动态操作的对象的信息。</param>
      <param name="result">get 操作的结果。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetValue(System.String,System.Object@)">
      <summary>获取与指定的键关联的值。</summary>
      <returns>如果字典包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则包含与该键关联的值；否则，将包含 value 参数的类型的默认值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>提供用于设置成员值的操作的实现。</summary>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <param name="binder">提供有关调用动态操作的对象的信息。</param>
      <param name="value">要设置到成员的值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Unwrap(System.Object)">
      <summary>解包与字典关联的指定值。</summary>
      <returns>解包的值。</returns>
      <param name="value">要解包的值。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Values">
      <summary>获取字典中包含的值集合。</summary>
      <returns>字典中包含的值集合。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Wrap(System.Object)">
      <summary>包装与字典关联的指定值。</summary>
      <returns>包装的值。</returns>
      <param name="value">要包装的值。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator">
      <summary>表示空 Javascript 代理的生成器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>使用指定的 URL 生成代理。</summary>
      <returns>生成的代理。</returns>
      <param name="serviceUrl">服务 URL。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator">
      <summary>表示与程序集定位器关联的可枚举值。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator" /> 类的新实例。</summary>
      <param name="assemblies">程序集。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.GetAssemblies">
      <summary>返回程序集列表。</summary>
      <returns>程序集列表</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ExceptionContext"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.#ctor(System.Exception)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Error">
      <summary>要发送到调用客户端的异常。除非 Error 是 <see cref="T:Microsoft.AspNet.SignalR.HubException" />，或者 <see cref="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors" /> 设置为 true，否则这将被泛型 Exception 重写。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Result">
      <summary>要返回（而不是引发 Error）的值。只要设置了 Result，Error 就会设置为 null。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.GroupProxy">
      <summary>表示集线器使用的一组信号代理。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.GroupProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext">
      <summary>表示客户端的调用上下文。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.#ctor(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" /> 类的新实例。</summary>
      <param name="request">当前的 HTTP 请求。</param>
      <param name="connectionId">连接 ID。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.ConnectionId">
      <summary>获取调用客户端的连接 ID。</summary>
      <returns>调用客户端的连接 ID。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Headers">
      <summary>获取请求的标头。</summary>
      <returns>请求的标头。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.QueryString">
      <summary>获取请求的查询字符串。</summary>
      <returns>请求的查询字符串。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Request">
      <summary>为当前 HTTP 请求获取 <see cref="T:Microsoft.AspNet.SignalR.IRequest" />。</summary>
      <returns>当前 HTTP 请求的 <see cref="T:Microsoft.AspNet.SignalR.IRequest" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.RequestCookies">
      <summary>获取请求的 Cookie。</summary>
      <returns>请求的 Cookie。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.User">
      <summary>获取请求的 <see cref="T:System.Security.Principal.IPrincipal" />。</summary>
      <returns>请求的 <see cref="T:System.Security.Principal.IPrincipal" />。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext">
      <summary>封装有关 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的单个 SignalR 连接的所有信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,Microsoft.AspNet.SignalR.IConnection,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" /> 类的新实例。</summary>
      <param name="pipelineInvoker">管道调用程序。</param>
      <param name="connection">接口连接。</param>
      <param name="hubName">集线器的名称。</param>
      <param name="connectionId">连接 ID。</param>
      <param name="tracker">状态更改跟踪程序。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Caller">
      <summary>获取或设置调用客户端。</summary>
      <returns>调用客户端。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Others">
      <summary>获取或设置除调用客户端以外的所有已连接客户端。</summary>
      <returns>除调用客户端之外的所有已连接客户端。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroup(System.String)">
      <summary>返回组中除调用客户端之外的所有客户端的动态表示形式。</summary>
      <returns>组中除调用客户端之外的所有客户端的动态表示形式。</returns>
      <param name="groupName">组的名称。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})">
      <summary>返回指定组中除调用客户端之外的所有客户端的动态表示形式。</summary>
      <returns>组中除调用客户端之外的所有客户端的动态表示形式。</returns>
      <param name="groupNames">组的名称</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.All"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.AllExcept(System.String[])">
      <summary>返回除指定的调用客户端之外的所有客户端的动态表示形式。</summary>
      <returns>除指定的调用客户端之外的所有客户端的动态表示形式。</returns>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Client(System.String)">
      <summary>返回具有指定 connectionid 的连接的动态表示形式。</summary>
      <returns>指定的客户端的动态表示形式。</returns>
      <param name="connectionId">连接 ID</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Clients(System.Collections.Generic.IList{System.String})">
      <summary>返回具有指定 connectionid 的连接的动态表示形式。</summary>
      <returns>指定的客户端的动态表示形式。</returns>
      <param name="connectionIds">连接 ID。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Group(System.String,System.String[])">
      <summary>返回指定组的动态表示形式。</summary>
      <returns>指定的组的动态表示形式。</returns>
      <param name="groupName">组的名称</param>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Groups(System.Collections.Generic.IList{System.String},System.String[])">
      <summary>返回指定组的动态表示形式。</summary>
      <returns>指定的组的动态表示形式。</returns>
      <param name="groupNames">组的名称。</param>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.HubName"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Invoker"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor">
      <summary>表示有关单个集线器的信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.CreateQualifiedName(System.String)">
      <summary>为使用指定的非限定名称的集线器创建限定名称。</summary>
      <returns>创建的限定名称。</returns>
      <param name="unqualifiedName">非限定名称。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.HubType">
      <summary>获取或设置集线器类型。</summary>
      <returns>集线器类型。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher">
      <summary>处理通过集线器持久性连接进行的所有通信。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.#ctor(Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 类的新实例。</summary>
      <param name="configuration">确定是否启用 JS 代理并为客户端提供详细集线器错误的配置设置。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>构建为连接的指定请求授权的集线器列表。</summary>
      <returns>如果有已获得授权的集线器，则为 true；否则为 false。</returns>
      <param name="request">当前连接的请求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.GetSignals(System.String,System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>主机调用此项来初始化 IDependencyResolver 的集线器调度。</summary>
      <param name="resolver">IDependency 解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>当连接连接到此集线器实例时调用。</summary>
      <returns>连接连接到此集线器实例时调用的任务。</returns>
      <param name="request">当前连接的 IRequest。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>当连接与此集线器实例断开时调用。</summary>
      <returns>连接从此集线器实例断开时调用的任务。</returns>
      <param name="request">当前连接的 IRequest。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>处理集线器的传入方法调用。</summary>
      <returns>从此集线器实例收到数据时调用的任务。</returns>
      <param name="request">当前连接的 IRequest。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
      <param name="data">收到的数据。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>当连接重新连接到此集线器实例时调用。</summary>
      <returns>连接重新连接到此集线器实例时调用的任务。</returns>
      <param name="request">当前连接的 IRequest。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>连接超时后重新连接时调用以确定应重新加入哪些组。</summary>
      <returns>超时后用于重新连接的连接列表，用于确定应重新加入哪些组。</returns>
      <param name="request">当前连接的 IRequest。</param>
      <param name="groups">进行调用的连接声明是其一部分的组。</param>
      <param name="connectionId">进行重新连接的客户端的 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>处理 HostContext 的所有请求。</summary>
      <returns>处理 HostContext 的所有请求的任务。</returns>
      <param name="context">主机上下文。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Trace">
      <summary>获取集线器连接，这些连接使应用程序能够跟踪代码的执行，并将跟踪消息与其源关联。</summary>
      <returns>集线器连接，这些连接使应用程序能够跟踪代码的执行，并将跟踪消息与其源关联。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions">
      <summary>提供整个集线器进程的集线器管理器扩展。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.EnsureHub(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter[])">
      <summary>确认有关集线器描述符的所有信息。</summary>
      <returns>用于确认所有信息的集线器描述符。</returns>
      <param name="hubManager">集线器管理器。</param>
      <param name="hubName">集线器的名称。</param>
      <param name="counters">性能计数器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubMethods(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String)">
      <summary>获取可对给定集线器调用的所有方法。</summary>
      <returns>要对给定集线器调用的方法集合。</returns>
      <param name="hubManager">集线器管理器。</param>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubs(Microsoft.AspNet.SignalR.Hubs.IHubManager)">
      <summary>检索所有可用集线器。</summary>
      <returns>所有可用集线器的检索。</returns>
      <param name="hubManager">集线器管理器。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute">
      <summary>表示集线器的方法名称特性。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute" /> 类的新实例。</summary>
      <param name="methodName">方法的名称。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.MethodName">
      <summary>获取或设置方法名称。</summary>
      <returns>方法名称。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute">
      <summary>表示集线器名称的特性。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute" /> 类的新实例。</summary>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.HubName">
      <summary>获取或设置集线器的名称。</summary>
      <returns>集线器的名称。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule">
      <summary>用于简化 IHubPipelineModules 的实现的公共基类。模块可以截获并自定义各种集线器处理阶段，如连接、重新连接、断开连接、调用服务器端集线器方法、调用客户端集线器方法、授权集线器客户端和重新加入集线器组。可以通过调用 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" /> 来激活模块。添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的组合模块是通过 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" /> 接口调用的。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>包装一个函数，该函数将在客户端订阅属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所描述的集线器的信号之前调用。默认情况下，<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> 将在 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 上查找特性，这有助于确定客户端是否有权订阅所描述集线器的方法调用。如果客户端有权订阅客户端集线器方法调用，则该函数返回 true；否则返回 false。</summary>
      <returns>一个已包装的函数，用于指示客户端是否有权连接到所描述的集线器。</returns>
      <param name="authorizeConnect">一个函数，用于指示客户端是否有权连接到所描述的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>包装一个函数，该函数在客户端连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 时针对客户端所连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnConnected 方法。</summary>
      <returns>客户端连接到集线器时要调用的已包装函数。</returns>
      <param name="connect">客户端连接到集线器时要调用的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>包装一个函数，该函数在客户端断开与 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 的连接时针对客户端所连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnDisconnected 方法。</summary>
      <returns>客户端断开与集线器的连接时要调用的已包装函数。</returns>
      <param name="disconnect">客户端断开与集线器的连接时要调用的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>包装用于调用服务器端集线器方法的函数。即使尚未授权客户端连接到某一集线器，客户端也有权调用该集线器的服务器端方法，除非通过不执行调用参数在 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> 中阻止调用。</summary>
      <returns>用于调用服务器端集线器方法的已包装函数。</returns>
      <param name="invoke">用于调用服务器端集线器方法的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>包装用于调用客户端集线器方法的函数。</summary>
      <returns>用于调用客户端集线器方法的已包装函数。</returns>
      <param name="send">用于调用客户端集线器方法的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>包装一个函数，该函数在客户端重新连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 时针对客户端所连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnReconnected 方法。</summary>
      <returns>客户端重新连接到集线器时要调用的已包装函数。</returns>
      <param name="reconnect">客户端重新连接到集线器时要调用的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>包装一个函数，该函数用于确定应允许客户端重新加入哪些属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所描述的集线器的组。默认情况下，会将正在重新连接到服务器的客户端从它们以前可能是其成员的所有组中删除，因为不受信任的客户端可能会声称它们是某些组的成员，但这些客户端却从未获得加入这些组的授权。</summary>
      <returns>一个已包装函数，用于确定应允许客户端重新加入哪些组。</returns>
      <param name="rejoiningGroups">一个函数，用于确定应允许客户端重新加入哪些组。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的连接组件以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> 之后，将调用此方法（如果可能）。</summary>
      <param name="hub">客户端已连接到的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的断开连接组件以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> 之后，将调用此方法（如果可能）。</summary>
      <param name="hub">客户端已与之断开连接的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterIncoming(System.Object,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>在稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的传入组件以及服务器端集线器方法执行完毕后，将调用此方法。</summary>
      <returns>服务器端集线器方法可能提供的新的或更新的返回值</returns>
      <param name="result">服务器端集线器方法的返回值</param>
      <param name="context">服务器端集线器方法调用的说明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的传出组件之后，将调用此方法。这并不意味着所有客户端都已收到集线器方法调用，但确实表示集线器调用消息已成功发布到消息总线。</summary>
      <param name="context">客户端集线器方法调用的说明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的重新连接组件以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> 之后，将调用此方法（如果可能）。</summary>
      <param name="hub">客户端已重新连接到的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeAuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的 AuthorizeConnect 组件之前，将调用此方法。如果此方法返回 false，则那些之后添加的模块将不会运行，并且将不允许客户端订阅属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所定义的集线器的客户端方法调用。</summary>
      <returns>如果客户端有权连接到集线器，则为 true；否则为 false。</returns>
      <param name="hubDescriptor">客户端尝试订阅的集线器的描述。</param>
      <param name="request">尝试订阅集线器的客户端的连接请求。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的连接组件之前，将调用此方法。如果此方法返回 false，则那些之后添加的模块以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> 方法将不会运行。</summary>
      <returns>如果应执行之后添加的模块的连接组件以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> 方法，则为 true；否则为 false。</returns>
      <param name="hub">客户端已连接到的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的断开连接组件之前，将调用此方法。如果此方法返回 false，则那些之后添加的模块以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> 方法将不会运行。</summary>
      <returns>如果应执行之后添加的模块的断开连接组件以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> 方法，则为 true；否则为 false。</returns>
      <param name="hub">客户端已与之断开连接的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的传入组件之前，将调用此方法。如果此方法返回 false，则不会执行那些之后添加的模块以及服务器端集线器方法调用。即使尚未授权客户端连接到某一集线器，客户端也有权调用该集线器的服务器端方法，除非通过不执行调用参数在 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> 中阻止调用，或者通过返回 false 在 <see cref="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)" /> 中阻止调用。</summary>
      <returns>如果应执行之后添加的模块的传入组件以及服务器端集线器方法调用，则为 true；否则为 false。</returns>
      <param name="context">服务器端集线器方法调用的说明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的传出组件之前，将调用此方法。如果此方法返回 false，则不会执行那些之后添加的模块以及客户端集线器方法调用。</summary>
      <returns>如果应执行之后添加的模块的传出组件以及客户端集线器方法调用，则为 true；否则为 false。</returns>
      <param name="context">客户端集线器方法调用的说明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>在执行稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的任何模块的重新连接组件之前，将调用此方法。如果此方法返回 false，则那些之后添加的模块以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> 方法将不会运行。</summary>
      <returns>如果应执行之后添加的模块的重新连接组件以及 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> 方法，则为 true；否则为 false。</returns>
      <param name="hub">客户端已重新连接到的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnIncomingError(Microsoft.AspNet.SignalR.Hubs.ExceptionContext,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>当服务器端集线器方法或者稍后添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的模块的传入组件引发了未捕获的异常时，将调用此方法。使用此方法观察异常时，不会阻止该异常向上冒泡到其他模块。</summary>
      <param name="exceptionContext">表示在服务器端调用期间引发的异常。可以使用此上下文更改错误或设置结果。</param>
      <param name="invokerContext">服务器端集线器方法调用的说明。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubRequest">
      <summary>提供与连接到集线器的 SignalR 连接请求进行通信的方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubRequest.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Hub">
      <summary>获取或设置集线器的连接值。</summary>
      <returns>集线器的连接值。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Id">
      <summary>获取或设置连接 ID。</summary>
      <returns>连接 ID。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Method">
      <summary>获取或设置请求方法。</summary>
      <returns>请求方法。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.ParameterValues">
      <summary>获取或设置参数值。</summary>
      <returns>参数值。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.State">
      <summary>获取或设置请求的当前状态。</summary>
      <returns>请求的当前状态。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubResponse">
      <summary>表示从传入集线器请求返回的响应。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubResponse.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubResponse" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Error">
      <summary>获取或设置由于调用集线器方法而发生的异常。</summary>
      <returns>由于调用集线器方法而发生的异常。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.ErrorData">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.HubException" /> 中包含的额外错误数据</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Id">
      <summary>获取或设置操作的 ID。</summary>
      <returns>操作的 ID。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.IsHubException">
      <summary>指示 Error 是否为 <see cref="T:Microsoft.AspNet.SignalR.HubException" />。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Result">
      <summary>获取或设置调用的结果。</summary>
      <returns>调用的结果。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.StackTrace">
      <summary>获取或设置由于调用集线器方法而发生的异常的堆栈跟踪。</summary>
      <returns>由于调用集线器方法而发生的异常的堆栈跟踪。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.State">
      <summary>获取或设置更改导致往返的状态。</summary>
      <returns>更改导致往返的状态。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator">
      <summary>查找某个程序集并返回有关其模块的信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator.GetAssemblies">
      <summary>返回模块引用的程序集的列表。</summary>
      <returns>模块引用的程序集的列表。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection">
      <summary>将由 <see cref="T:System.Attribute" /> 实现的端口，可授权客户端连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>根据给定的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" />，确定客户端是否有权连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</summary>
      <returns>如果调用方有权连接到集线器，则为 true；否则为 false。</returns>
      <param name="hubDescriptor">客户端尝试连接到的集线器的描述。</param>
      <param name="request">来自客户端的连接请求。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation">
      <summary>将由 <see cref="T:System.Attribute" /> 实现的接口，可以授权调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>根据给定的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" />，确定客户端是否有权调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 方法。</summary>
      <returns>如果调用方有权调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 方法，则为 true；否则为 false。</returns>
      <param name="hubIncomingInvokerContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" />，提供有关 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 方法调用的详细信息。</param>
      <param name="appliesToMethod">指示接口实例是否是直接应用于方法的特性。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy">
      <summary>客户端集线器的服务器端代理。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IClientProxy.Invoke(System.String,System.Object[])">
      <summary>调用由 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy" /> 实例表示的连接的方法。</summary>
      <returns>表示数据何时已发送到客户端的任务。</returns>
      <param name="method">要调用的方法的名称</param>
      <param name="args">要传递给客户端的参数</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHub">
      <summary>提供一个接口，该接口表示与连接到集线器的 SignalR 连接进行通信的方法。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
      <summary>获取或设置正在连接到集线器的客户端。</summary>
      <returns>正在连接到集线器的客户端。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
      <summary>获取或设置有关调用客户端的信息。</summary>
      <returns>有关调用客户端的信息。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
      <summary>获取或设置此集线器实例的组管理器。</summary>
      <returns>此集线器实例的组管理器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected">
      <summary>当连接连接到此集线器实例时调用。</summary>
      <returns>表示连接操作的任务对象。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected">
      <summary>当连接与此集线器实例断开时调用。</summary>
      <returns>表示断开连接操作的任务对象。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected">
      <summary>当连接重新连接到此集线器实例时调用。</summary>
      <returns>表示重新连接操作的任务对象。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubActivator">
      <summary>提供用于创建集线器实例的方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>创建新的集线器实例。</summary>
      <returns>新创建的集线器。</returns>
      <param name="descriptor">集线器描述符。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext">
      <summary>封装有关 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的单个 SignalR 连接的所有信息。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Caller"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Others"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroup(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext">
      <summary>封装有关 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 SignalR 连接的所有信息。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.All">
      <summary>获取或设置所有连接的客户端。</summary>
      <returns>所有已连接的客户端。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.AllExcept(System.String[])">
      <summary>返回除指定的调用客户端之外的所有客户端的动态表示形式。</summary>
      <returns>除指定的调用客户端之外的所有客户端的动态表示形式。</returns>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Client(System.String)">
      <summary>返回具有指定连接 ID 的连接的动态表示形式。</summary>
      <returns>指定的客户端的动态表示形式。</returns>
      <param name="connectionId">连接 ID。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Clients(System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Group(System.String,System.String[])">
      <summary>返回指定组的动态表示形式。</summary>
      <returns>指定的组的动态表示形式。</returns>
      <param name="groupName">组的名称。</param>
      <param name="excludeConnectionIds">要排除的连接 ID 的列表。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Groups(System.Collections.Generic.IList{System.String},System.String[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider">
      <summary>描述集线器描述符提供程序，该程序提供可用集线器的相关信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.GetHubs">
      <summary>检索所有可用集线器。</summary>
      <returns>集线器描述符的集合。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>尝试检索具有给定名称的集线器。</summary>
      <returns>如果找到了集线器，则为 True</returns>
      <param name="hubName">集线器的名称。</param>
      <param name="descriptor">检索到的描述符对象。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext">
      <summary>源自客户端的服务器端集线器方法调用的说明。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Args">
      <summary>获取要传递给被调用方法的参数。</summary>
      <returns>要传递给被调用方法的参数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Hub">
      <summary>获取集线器实例，该实例中包含成员形式的被调用方法。</summary>
      <returns>集线器实例，其中包含成员形式的被调用方法。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.MethodDescriptor">
      <summary>获取客户端所调用的方法的说明。</summary>
      <returns>客户端所调用的方法的说明。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.StateTracker">
      <summary>获取表示调用时客户端上的集线器状态的键/值存储。</summary>
      <returns>表示调用时客户端上的集线器状态的键/值存储。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubManager">
      <summary>描述集线器管理器 - 整个集线器和方法查找过程中的要点。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHub(System.String)">
      <summary>检索单个集线器描述符。</summary>
      <returns>如果找到，则为集线器描述符；否则为 Null。</returns>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>在给定集线器上检索具有给定名称的方法。</summary>
      <returns>如果找到，则为该方法的描述符；否则为 Null。</returns>
      <param name="hubName">集线器的名称。</param>
      <param name="method">要查找的方法的名称。</param>
      <param name="parameters">要匹配的方法参数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>获取可对给定集线器调用的所有方法。</summary>
      <returns>可用方法的列表。</returns>
      <param name="hubName">集线器的名称。</param>
      <param name="predicate">用于筛选结果的可选谓词。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>检索与给定谓词匹配的所有可用集线器。</summary>
      <returns>集线器描述符的列表。</returns>
      <param name="predicate">谓词。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHub(System.String)">
      <summary>将给定集线器名称解析为一个具体的对象。</summary>
      <returns>如果找到，则为集线器实现实例；否则为 Null。</returns>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHubs">
      <summary>将所有可用集线器解析为其具体对象。</summary>
      <returns>集线器实例的列表。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext">
      <summary>源自服务器的客户端集线器方法调用的说明。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Connection">
      <summary>获取与已调用服务器端集线器方法（该方法调用客户端集线器方法）的客户端对应的 <see cref="T:Microsoft.AspNet.SignalR.IConnection" />（如果有）。</summary>
      <returns>与已调用服务器端集线器方法（该方法调用客户端集线器方法）的客户端对应的 <see cref="T:Microsoft.AspNet.SignalR.IConnection" />（如果有）。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.ExcludedSignals">
      <summary>获取信号（ConnectionId、集线器类型名称或集线器类型名称 +“.”<see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" /> 为何值都不应接收方法调用的客户端的信号（ConnectionId、集线器类型名称或集线器类型名称 +“.”+ 组名）。</summary>
      <returns>属于无论<see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" /> 为何值都不应接收方法调用的客户端的信号（ConnectionId、集线器类型名称或集线器类型名称 +“.”+ 组名）。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Invocation">
      <summary>获取要对客户端进行的方法调用的说明。</summary>
      <returns>要对客户端进行的方法调用的说明。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal">
      <summary>获取信号（ConnectionId、集线器类型名称或集线器类型名称 +“.”接收方法调用的客户端的信号（ConnectionId、集线器类型名称或集线器类型名称 +“.”+ 组名）。</summary>
      <returns>属于接收方法调用的客户端的信号（ConnectionId、集线器类型名称或集线器类型名称 +“.”+ 组名）。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signals">
      <summary>属于无论接收方法调用的客户端的信号（ConnectionId、集线器类型名称或集线器类型名称 +“.”+ 组名）。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline">
      <summary>可以截获并自定义各种集线器处理阶段（如连接、重新连接、断开连接、调用服务器端集线器方法、调用客户端集线器方法、授权集线器客户端和重新加入集线器组）的模块集合。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)">
      <summary>将 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> 添加到集线器管道。先添加到管道的模块将包装后添加到管道的模块。在调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" /> 中的任何方法之前，必须先将所有模块添加到管道。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 本身加上新添加的模块使 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" /> 调用可以进行链接。此方法可转变调用它时所使用的管道，因此无需存储其结果。</returns>
      <param name="pipelineModule">可以截获并自定义各种集线器处理阶段（如连接、重新连接、断开连接、调用服务器端集线器方法、调用客户端集线器方法、授权集线器客户端和重新加入集线器组）的模块。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker">
      <summary>此接口的实现负责执行完成各种集线器处理阶段（如连接、重新连接、断开连接、调用服务器端集线器方法、调用客户端集线器方法、授权集线器客户端和重新加入集线器组）所需的操作。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.AuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>在客户端订阅属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所描述的集线器的信号之前调用。默认情况下，<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> 将在 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 上查找特性，这有助于确定客户端是否有权订阅所描述集线器的方法调用。</summary>
      <returns>如果客户端有权订阅客户端集线器方法调用，则为 true；否则为 false。</returns>
      <param name="hubDescriptor">客户端尝试连接到的集线器的描述。</param>
      <param name="request">由客户端发出的连接请求，其中应包括客户端的 <see cref="T:System.Security.Principal.IPrincipal" /> 用户。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Connect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>客户端连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 时针对客户端连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnConnected 方法。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="hub">客户端所连接到的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Disconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>客户端断开与 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 的连接时针对客户端连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnDisconnected 方法。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="hub">客户端已与之断开连接的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Invoke(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>调用服务器端集线器方法。</summary>
      <returns>提供服务器端集线器方法调用的返回值的异步操作。</returns>
      <param name="context">服务器端集线器方法调用的说明。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Reconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>客户端重新连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 时针对客户端连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnReconnected 方法。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="hub">客户端重新连接到的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.RejoiningGroups(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String})">
      <summary>此方法用于确定应允许客户端重新加入哪些属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所描述的集线器的组。默认情况下，会将正在重新连接到服务器的客户端从它们以前可能是其成员的所有组中删除，因为不受信任的客户端可能会声称它们是某些组的成员，但这些客户端却从未获得加入这些组的授权。</summary>
      <returns>允许客户端重新加入的组的列表。</returns>
      <param name="hubDescriptor">客户端尝试重新加入其组的集线器的描述。</param>
      <param name="request">由尝试重新加入组的客户端发出的重新连接请求。</param>
      <param name="groups">客户端在重新连接之前声称是其成员的组的列表，属于相关集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Send(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>调用客户端集线器方法。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="context">客户端集线器方法调用的说明。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> 可以截获并自定义各种集线器处理阶段，如连接、重新连接、断开连接、调用服务器端集线器方法、调用客户端集线器方法、授权集线器客户端和重新加入集线器组。可以通过调用 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" /> 来激活这些模块。添加到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> 的组合模块是通过 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" /> 接口调用的。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>包装一个函数，该函数将在客户端订阅属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所描述的集线器的信号之前调用。默认情况下，<see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> 将在 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 上查找特性，这有助于确定客户端是否有权订阅所描述集线器的方法调用。如果客户端有权订阅客户端集线器方法调用，则该函数返回 true；否则返回 false。</summary>
      <returns>一个已包装的函数，用于指示客户端是否有权连接到所描述的集线器。</returns>
      <param name="authorizeConnect">一个函数，用于指示客户端是否有权连接到所描述的集线器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>包装一个函数，该函数在客户端连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 时针对客户端所连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnConnected 方法。</summary>
      <returns>客户端连接到集线器时要调用的已包装函数。</returns>
      <param name="connect">客户端连接到集线器时要调用的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>包装一个函数，该函数在客户端断开与 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 的连接时针对客户端所连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnDisconnected 方法。</summary>
      <returns>客户端断开与集线器的连接时要调用的已包装函数。</returns>
      <param name="disconnect">客户端断开与集线器的连接时要调用的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>包装用于调用服务器端集线器方法的函数。即使尚未授权客户端连接到某一集线器，客户端也有权调用该集线器的服务器端方法，除非通过不执行调用参数在 <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> 中阻止调用。</summary>
      <returns>用于调用服务器端集线器方法的已包装函数。</returns>
      <param name="invoke">用于调用服务器端集线器方法的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>包装用于调用客户端集线器方法的函数。</summary>
      <returns>用于调用客户端集线器方法的已包装函数。</returns>
      <param name="send">用于调用客户端集线器方法的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>包装一个函数，该函数在客户端重新连接到 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 时针对客户端所连接到的每个 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 调用。默认情况下，这将导致调用 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> 的 OnReconnected 方法。</summary>
      <returns>客户端重新连接到集线器时要调用的已包装函数。</returns>
      <param name="reconnect">客户端重新连接到集线器时要调用的函数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>包装一个函数，该函数用于确定应允许客户端重新加入哪些属于 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> 所描述的集线器的组。默认情况下，会将正在重新连接到服务器的客户端从它们以前可能是其成员的所有组中删除，因为不受信任的客户端可能会声称它们是某些组的成员，但这些客户端却从未获得加入这些组的授权。</summary>
      <returns>一个已包装函数，用于确定应允许客户端重新加入哪些组。</returns>
      <param name="rejoiningGroups">一个函数，用于确定应允许客户端重新加入哪些组。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser">
      <summary>通过 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> 处理分析传入请求。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser.Parse(System.String,Newtonsoft.Json.JsonSerializer)">
      <summary>将传入集线器负载分析为 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" />。</summary>
      <returns>生成的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" />。</returns>
      <param name="data">原始集线器负载。</param>
      <param name="serializer">用于分析数据的 JsonSerializer。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier">
      <summary>合并、缩减和缓存集线器的 JavaScript。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier.Minify(System.String)">
      <summary>缩减 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" /> 的指定源。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" /> 的指定源。</returns>
      <param name="source">缩减的源。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator">
      <summary>为 JavaScript 接口生成代理服务。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>为 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" /> 的服务 URL 生成代理。</summary>
      <returns>用于生成 <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" /> 的服务 URL 的代理。</returns>
      <param name="serviceUrl">URL 的服务。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider">
      <summary>描述用于生成给定集线器上的可用方法集合的集线器方法提供程序。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>检索给定集线器上的所有方法。</summary>
      <returns>可用方法。</returns>
      <param name="hub">集线器描述符对象。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>尝试检索方法。</summary>
      <returns>如果找到了方法，则为 True。</returns>
      <param name="hub">集线器描述符对象</param>
      <param name="method">方法的名称。</param>
      <param name="descriptor">如果找到，则为该方法的描述符；否则为 Null。</param>
      <param name="parameters">要匹配的方法参数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IParameterResolver">
      <summary>描述一个可基于提供的信息解析与参数匹配的值的参数解析程序。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>基于提供的对象解析方法参数值。</summary>
      <returns>参数值的数组。</returns>
      <param name="method">方法描述符。</param>
      <param name="values">要从中解析参数值的值的列表。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor">
      <summary>表示有关单个集线器方法的信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Attributes">
      <summary>获取或设置附加到此方法的特性。</summary>
      <returns>附加到此方法的特性。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Hub">
      <summary>获取集线器描述符对象，即此方法的目标。</summary>
      <returns>集线器描述符对象，即此方法的目标。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Invoker">
      <summary>获取或设置方法调用委托。使用目标集线器和调用参数数组作为它的参数。</summary>
      <returns>方法调用委托。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Parameters">
      <summary>获取或设置可用的方法参数。</summary>
      <returns>可用的方法参数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.ReturnType">
      <summary>获取或设置此方法的返回类型。</summary>
      <returns>此方法的返回类型。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodExtensions">
      <summary>表示 SignalR 集线器的方法扩展。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodExtensions.Matches(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>指定方法扩展是否与其他方法描述符匹配。</summary>
      <returns>如果方法扩展与其他方法描述符匹配，则为 true；否则为 false。</returns>
      <param name="methodDescriptor">方法描述符。</param>
      <param name="parameters">参数列表。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.Collections.Generic.IList{System.String},System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.GetInvocationData(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.Invoke(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException">
      <summary>表示当客户端无权连接到集线器时引发的异常。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> 类的新实例。</summary>
      <param name="info">有关异常的序列化信息。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String)">
      <summary>使用错误消息初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> 类的新实例。</summary>
      <param name="message">有关异常的消息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String,System.Exception)">
      <summary>使用错误消息和内部异常初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> 类的新实例。</summary>
      <param name="message">有关异常的消息。</param>
      <param name="inner">导致异常的错误。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier">
      <summary>表示值为 null 的 Javascript 缩减程序。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" /> 类的新实例。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Instance">
      <summary>指定 <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" /> 实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Minify(System.String)">
      <summary>缩减 Javascript 的指定源。</summary>
      <returns>缩减的源。</returns>
      <param name="source">要缩减的源。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor">
      <summary>Provides details about the null method.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor" /> class.</summary>
      <param name="methodName">The name for this null method.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Attributes">
      <summary>Gets or sets the attributes attached to this method.</summary>
      <returns>The attributes attached to this method.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Invoker">
      <summary>Gets or sets the method invocation delegate. Takes a target hub and an array of invocation arguments as it's arguments.</summary>
      <returns>The method invocation delegate.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Parameters">
      <summary>Gets or sets the available method parameters.</summary>
      <returns>The available method parameters.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor">
      <summary>表示有关单个集线器方法参数的信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.Name">
      <summary>获取或设置参数名称。</summary>
      <returns>参数名称。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.ParameterType">
      <summary>获取或设置参数类型。</summary>
      <returns>参数类型。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider">
      <summary>描述集线器描述符提供程序，并提供有关可用集线器的反射信息。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider" /> 类的新实例。</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.BuildHubsCache">
      <summary>检索用于生成集线器缓存的连接集合。</summary>
      <returns>用于生成集线器缓存的连接集合。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.GetHubs">
      <summary>检索所有可用集线器。</summary>
      <returns>可用集线器的集合。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>尝试检索具有给定名称的集线器。</summary>
      <returns>如果找到了集线器，则为 true；否则为 false。</returns>
      <param name="hubName">要检索的集线器的名称。</param>
      <param name="descriptor">此方法返回时，将包含检索到的描述符对象。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider">
      <summary>表示描述符提供程序的反射方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>返回提供程序的方法集合。</summary>
      <returns>提供程序的方法集合。</returns>
      <param name="hub">集线器描述符。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>在指定的 <paramref name="hub" /> 中搜索指定的 <paramref name="method" />。</summary>
      <returns>如果在集线器中找到与名称/参数集匹配的方法，则为 true；否则为 false。</returns>
      <param name="hub">要在其中搜索指定 <paramref name="method" /> 的集线器。</param>
      <param name="method">要搜索的方法名。</param>
      <param name="descriptor">如果成功，则为已解析的 <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" />。</param>
      <param name="parameters">将用于帮助查找指定 <paramref name="method" /> 的特定重载的参数集。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper">
      <summary>表示反射帮助器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetAttributeValue``2(System.Reflection.ICustomAttributeProvider,System.Func{``0,``1})">
      <summary>获取此帮助器的特性值。</summary>
      <returns>此帮助器的特性值。</returns>
      <param name="source">要从中获取值的源。</param>
      <param name="valueGetter">值 getter。</param>
      <typeparam name="TAttribute">特性的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetExportedHubMethods(System.Type)">
      <summary>获取已导出集线器方法的列表。</summary>
      <returns>已导出的集线器方法的列表。</returns>
      <param name="type">要获取的方法的类型。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy">
      <summary>表示集线器使用的信号代理。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>获取与代理关联的客户端集线器调用数据。</summary>
      <returns>与代理关联的客户端集线器调用数据。</returns>
      <param name="method">方法。</param>
      <param name="args">参数。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.HubName">
      <summary>获取或设置集线器的名称。</summary>
      <returns>集线器的名称。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoke(System.String,System.Object[])">
      <summary>调用方法并返回方法调用的结果。</summary>
      <returns>操作结果。</returns>
      <param name="method">要调用的方法。</param>
      <param name="args">参数的数组。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoker"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Signal">
      <summary>获取或设置与 <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" /> 关联的信号。</summary>
      <returns>与 <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" /> 关联的信号。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>提供用于获取成员值的操作的实现。</summary>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <param name="binder">有关调用动态操作的对象的信息。</param>
      <param name="result">get 操作的结果。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>提供用于调用成员的操作的实现。</summary>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <param name="binder">提供有关动态操作的信息。</param>
      <param name="args">在调用操作期间传递给对象成员的参数。</param>
      <param name="result">成员调用的结果。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker">
      <summary>表示更改跟踪字典。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" /> 类的新实例。</summary>
      <param name="values">字典值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.GetChanges">
      <summary>获取与跟踪程序关联的更改。</summary>
      <returns>与跟踪程序关联的更改。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.Item(System.String)">
      <summary>获取或设置与使用指定键的跟踪程序关联的项。</summary>
      <returns>与使用指定键的跟踪程序关联的项。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy">
      <summary>表示集线器使用的状态信号代理。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>获取与代理关联的客户端集线器调用数据。</summary>
      <returns>与代理关联的客户端集线器调用数据。</returns>
      <param name="method">方法。</param>
      <param name="args">参数。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>提供用于获取成员值的操作的实现。</summary>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <param name="binder">有关调用动态操作的对象的信息。</param>
      <param name="result">get 操作的结果。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>提供用于设置成员值的操作的实现。</summary>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <param name="binder">有关调用动态操作的对象的信息。</param>
      <param name="value">set 操作的结果。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.UserProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.UserProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler">
      <summary>表示用于处理应用认证工具包 (ACK) 的实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor(System.Boolean,System.TimeSpan,System.TimeSpan)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" /> 类的新实例。</summary>
      <param name="completeAcksOnTimeout">如果 ACK 在超时时已完成，则为 true；否则为 false。</param>
      <param name="ackThreshold">ACK 阈值。</param>
      <param name="ackInterval">ACK 间隔。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.CreateAck(System.String)">
      <summary>创建新的 ACK 对象。</summary>
      <returns>创建的 ACK 对象。</returns>
      <param name="id">标识符。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose">
      <summary>释放 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" /> 使用的所有资源。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose(System.Boolean)">
      <summary>释放此实例使用的所有资源。</summary>
      <param name="disposing">如果要释放托管和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.TriggerAck(System.String)">
      <summary>触发指定的 ACK 对象。</summary>
      <returns>操作结果。</returns>
      <param name="id">ACK 标识符。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader">
      <summary>表示与数组段关联的文本读取器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.#ctor(System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader" /> 类的新实例。</summary>
      <param name="buffer">数组段缓冲区。</param>
      <param name="encoding">编码。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从当前读取器中读取指定的最大字符数，并从指定的索引处开始，将数据写入缓冲区。</summary>
      <returns>已读取的字符数。</returns>
      <param name="buffer">包含具有索引之间的值的指定字符数组，这些字符将替换为从当前源读取的字符。</param>
      <param name="index">缓冲区中开始写入的位置。</param>
      <param name="count">要读取的最大字符数。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Connection">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.#ctor(Microsoft.AspNet.SignalR.Messaging.IMessageBus,Newtonsoft.Json.JsonSerializer,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IAckHandler,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Infrastructure.IProtectedData)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.Connection" /> 类的新实例。</summary>
      <param name="newMessageBus">新消息总线。</param>
      <param name="jsonSerializer">json 序列化程序。</param>
      <param name="baseSignal">基本信号。</param>
      <param name="connectionId">连接 ID。</param>
      <param name="signals">信号集合。</param>
      <param name="groups">组集合。</param>
      <param name="traceManager">跟踪管理器。</param>
      <param name="ackHandler">ack 处理程序。</param>
      <param name="performanceCounterManager">性能计数器管理器。</param>
      <param name="protectedData">受保护的数据。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.DefaultSignal">
      <summary>获取此连接的主要信号。</summary>
      <returns>此连接的主要信号。</returns>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyAdded">
      <summary>在事件添加了某个键时发生。</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyRemoved">
      <summary>在事件删除了该键时发生。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Identity">
      <summary>获取此连接的标识属性。</summary>
      <returns>此连接的标识属性。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Microsoft#AspNet#SignalR#Messaging#ISubscriber#EventKeys">
      <summary>获取可由索引单独访问的对象的列表。</summary>
      <returns>可由索引单独访问的对象的列表。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>接收连接方法的消息响应。</summary>
      <returns>要接收的连接方法的消息响应。</returns>
      <param name="messageId">消息 id。</param>
      <param name="callback">确定连接是否进行回调响应。</param>
      <param name="maxMessages">消息的最大数目。</param>
      <param name="state">连接状态。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>将某个消息发送到一个或多个连接。</summary>
      <returns>发送到一个或多个连接的消息。</returns>
      <param name="message">消息发送的连接。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Subscription">
      <summary>获取或设置此连接属性的订阅。</summary>
      <returns>此连接属性的订阅。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.WriteCursor">
      <summary>获取或设置光标以写入连续的字符系列。</summary>
      <returns>写入连续的字符系列的光标。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager">
      <summary>提供默认的 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> 实现。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager" /> 类的新实例。</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnection(System.Type)">
      <summary>返回 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</returns>
      <param name="type">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnectionContext``1">
      <summary>返回 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</returns>
      <typeparam name="T">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext``1">
      <summary>返回此连接的集线器上下文。</summary>
      <returns>此连接的集线器上下文。</returns>
      <typeparam name="T">集线器的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext(System.String)">
      <summary>返回此连接的具有指定名称的集线器上下文。</summary>
      <returns>此连接的集线器上下文。</returns>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData">
      <summary>提供用于保护数据的方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.#ctor(Microsoft.Owin.Security.DataProtection.IDataProtectionProvider)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData" /> 类的新实例。</summary>
      <param name="provider">数据保护提供程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Protect(System.String,System.String)">
      <summary>保护指定的数据。</summary>
      <returns>受保护的数据。</returns>
      <param name="data">要保护的数据。</param>
      <param name="purpose">保护的目的。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Unprotect(System.String,System.String)">
      <summary>删除对指定数据的保护。</summary>
      <returns>已取消保护的数据。</returns>
      <param name="protectedValue">受保护的数据。</param>
      <param name="purpose">保护的目的。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData">
      <summary>提供用于保护数据的方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Protect(System.String,System.String)">
      <summary>保护指定的数据。</summary>
      <returns>受保护的数据。</returns>
      <param name="data">要保护的数据。</param>
      <param name="purpose">保护的目的。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Unprotect(System.String,System.String)">
      <summary>删除对指定数据的保护。</summary>
      <returns>已取消保护的数据。</returns>
      <param name="protectedValue">受保护的数据。</param>
      <param name="purpose">保护的目的。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler">
      <summary>提供一个接口，该接口表示用于处理应用认证工具包 (ACK) 的实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.CreateAck(System.String)">
      <summary>创建新的 ACK 对象。</summary>
      <returns>创建的 ACK 对象。</returns>
      <param name="id">标识符。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.TriggerAck(System.String)">
      <summary>触发指定的 ACK 对象。</summary>
      <returns>操作结果。</returns>
      <param name="id">ACK 标识符。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter">
      <summary>Represents the base interface for class that has the ability to write raw binary data.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter.Write(System.ArraySegment{System.Byte})">
      <summary>Writes raw binary data to underlying stream.</summary>
      <param name="data">The raw binary data to write.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager">
      <summary>提供对集线器和持久性连接与引用的访问。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetConnectionContext``1">
      <summary>返回 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的 <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" />。</returns>
      <typeparam name="T">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext``1">
      <summary>返回与连接关联的集线器信息。</summary>
      <returns>与连接关联的集线器信息。</returns>
      <typeparam name="T">集线器的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext(System.String)">
      <summary>返回与连接关联的集线器信息。</summary>
      <returns>与连接关联的集线器信息。</returns>
      <param name="hubName">集线器的名称。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper">
      <summary>表示对由多个线程共享的变量执行原子操作的帮助器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper.CompareExchangeOr(System.Int32@,System.Int32,System.Int32,System.Int32)">
      <summary>比较引用相等的两个对象是否相等。</summary>
      <returns>如果两个对象相等，则为 true；否则为 false。</returns>
      <param name="location">与比较对象比较并可能被替换的目标对象。</param>
      <param name="value">比较结果相等时替换目标对象的对象。</param>
      <param name="comparandA">第一个比较对象。</param>
      <param name="comparandB">第二个比较对象。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Close">
      <summary>关闭性能计数器，并释放由此性能计数器实例分配的所有资源。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.CounterName"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Decrement">
      <summary>通过有效的原子操作，将关联的性能计数器减去一。</summary>
      <returns>减少的计数器值。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Increment">
      <summary>通过有效的原子操作，将关联的性能计数器加上一。</summary>
      <returns>增加的计数器值。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.IncrementBy(System.Int64)">
      <summary>通过有效的原子操作按指定的量增加或减少关联的性能计数器的值。</summary>
      <returns>新计数器值。</returns>
      <param name="value">要递增的值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.NextSample">
      <summary>获取计数器示例，并为其返回原始的或未计算的值。</summary>
      <returns>返回计数器示例，并为其返回原始的或未计算的值。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RawValue">
      <summary>获取或设置此计数器的原始的或未计算的值。</summary>
      <returns>计数器的原始值。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RemoveInstance">
      <summary>删除由 PerformanceCounter 对象 InstanceName 属性指定的类别实例。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager">
      <summary>提供对性能计数器的访问。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>获取表示连接（服务器到客户端）每秒接收的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>获取表示连接（服务器到客户端）自应用程序启动以来接收的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>获取表示连接（客户端到服务器）每秒发送的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>获取表示连接（客户端到服务器）自应用程序启动以来发送的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsConnected">
      <summary>获取表示自应用程序启动以来连接“连接”事件总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsCurrent">
      <summary>获取表示当前已连接的连接数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsDisconnected">
      <summary>获取表示自应用程序启动以来连接“断开连接”事件总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsReconnected">
      <summary>获取表示自应用程序启动以来连接“重新连接”事件总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllPerSec">
      <summary>获取表示每秒处理的所有错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllTotal">
      <summary>获取表示自应用程序启动以来处理的所有错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>获取表示每秒集线器调用错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>获取表示自应用程序启动以来处理的集线器调用错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>获取表示每秒集线器解析错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>获取表示自应用程序启动以来处理的集线器解析错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportPerSec">
      <summary>获取表示每秒传输错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportTotal">
      <summary>获取表示自应用程序启动以来处理的传输错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>初始化性能计数器。</summary>
      <param name="instanceName">主机实例名。</param>
      <param name="hostShutdownToken">表示主机关闭的 CancellationToken。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>加载性能计数器。</summary>
      <param name="categoryName">类别名称。</param>
      <param name="counterName">计数器名称。</param>
      <param name="instanceName">实例名称。</param>
      <param name="isReadOnly">计数器是否为只读。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>获取表示分配在消息总线中传送消息的辅助线程数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusBusyWorkers">
      <summary>获取表示当前忙于在消息总线中传送消息的辅助线程数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>获取表示每秒发布到消息总线的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>获取表示自应用程序启动以来发布到消息总线的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>获取表示订户每秒接收的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>获取表示自应用程序启动以来订户收到的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>获取表示消息总线的当前订户数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>获取表示消息总线每秒的新订户数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>获取表示自应用程序启动以来消息总线的订户总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>获取表示消息总线中的当前主题数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>获取表示每秒扩展错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>获取表示自应用程序启动以来发生的扩展错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>获取表示扩展消息总线每秒收到的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>获取表示当前扩展发送队列长度的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>获取性能计数器，该计数器表示当前配置的扩展消息总线提供程序中处于缓冲状态的逻辑流数。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>获取性能计数器，该计数器表示当前配置的扩展消息总线提供程序中处于打开状态的逻辑流数。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>获取性能计数器，该计数器表示当前配置的扩展消息总线提供程序中的逻辑流数。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData">
      <summary>表示一个接口，该接口提供的方法用于加密和解密与 SignalR 基础结构关联的数据。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Protect(System.String,System.String)">
      <summary>保护指定的数据。</summary>
      <returns>受保护的数据。</returns>
      <param name="data">要保护的数据。</param>
      <param name="purpose">保护的目的。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Unprotect(System.String,System.String)">
      <summary>解除对特定数据的保护。</summary>
      <returns>已取消保护的数据。</returns>
      <param name="protectedValue">要取消保护的受保护值。</param>
      <param name="purpose">解除保护的原因。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager">
      <summary>生成服务器 ID</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager.ServerId">
      <summary>服务器的 ID。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier">
      <summary>提供一个接口，该接口表示用于减小字符串大小的类。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)">
      <summary>以此 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> 实例可以反转的方式缩减字符串。</summary>
      <returns>
        <paramref name="value" /> 的缩减表示形式，不包含以下字符：,|\</returns>
      <param name="value">要缩减的字符串。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)">
      <summary>调用此函数指示将来对以前从 <paramref name="value" /> 缩减的字符串进行取消缩减尝试时，可能会遇到空返回值。这是一个清理引用 <paramref name="value" /> 的任何内部数据结构的机会。</summary>
      <param name="value">以前可能已缩减的字符串。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)">
      <summary>反转 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> 调用，以前至少对此 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> 实例执行过一次该调用，且后来未调用与返回 <paramref name="value" /> 的 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> 调用共享同一参数的 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" />。</summary>
      <returns>以前对 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> 进行的返回 <paramref name="value" /> 的所有调用的参数。如果在此 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> 实例中对 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> 进行的每个调用都从未返回 <paramref name="value" /> 或者对于返回 <paramref name="value" /> 的 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> 的最新调用后跟对共享同一参数的 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" /> 的调用，则 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)" /> 可能返回空值，但不得引发。</returns>
      <param name="value">以前调用 <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> 时返回的缩减字符串。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager">
      <summary>使用 Windows 性能计数器管理性能计数器。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.DefaultDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" /> 类的新实例。</summary>
      <param name="resolver">默认的依赖关系解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" /> 类的新实例。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.CategoryName">
      <summary>为此性能计数器指定性能计数器类别的名称。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>获取表示连接（服务器到客户端）每秒接收的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>获取表示连接（服务器到客户端）自应用程序启动以来接收的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>获取表示连接（客户端到服务器）每秒发送的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>获取表示连接（客户端到服务器）自应用程序启动以来发送的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsConnected">
      <summary>获取表示自应用程序启动以来连接“连接”事件总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsCurrent">
      <summary>获取表示当前已连接的连接数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsDisconnected">
      <summary>获取表示自应用程序启动以来连接“断开连接”事件总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsReconnected">
      <summary>获取表示自应用程序启动以来连接“重新连接”事件总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllPerSec">
      <summary>获取表示每秒处理的所有错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllTotal">
      <summary>获取表示自应用程序启动以来处理的所有错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>获取表示每秒集线器调用错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>获取表示自应用程序启动以来处理的集线器调用错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>获取表示每秒集线器解析错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>获取表示自应用程序启动以来处理的集线器解析错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportPerSec">
      <summary>获取表示每秒传输错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportTotal">
      <summary>获取表示自应用程序启动以来处理的传输错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>初始化性能计数器。</summary>
      <param name="instanceName">主机实例名。</param>
      <param name="hostShutdownToken">表示主机关闭的 CancellationToken。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>加载性能计数器。</summary>
      <param name="categoryName">类别名称。</param>
      <param name="counterName">计数器名称。</param>
      <param name="instanceName">实例名称。</param>
      <param name="isReadOnly">如果计数器是只读的，则为 true；否则为 false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>获取表示分配在消息总线中传送消息的辅助线程数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusBusyWorkers">
      <summary>获取表示当前忙于在消息总线中传送消息的辅助线程数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>获取表示每秒发布到消息总线的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>获取表示自应用程序启动以来发布到消息总线的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>获取表示订户每秒接收的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>获取表示自应用程序启动以来订户收到的消息总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>获取表示消息总线的当前订户数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>获取表示消息总线每秒的新订户数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>获取表示自应用程序启动以来消息总线的订户总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>获取表示消息总线中的当前主题数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>获取表示每秒扩展错误数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>获取表示自应用程序启动以来发生的扩展错误总数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>获取表示扩展消息总线每秒收到的消息数的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>获取表示当前扩展发送队列长度的性能计数器。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>获取性能计数器，该计数器表示当前配置的扩展消息总线提供程序中处于缓冲状态的逻辑流数。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>获取性能计数器，该计数器表示当前配置的扩展消息总线提供程序中处于打开状态的逻辑流数。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>获取性能计数器，该计数器表示当前配置的扩展消息总线提供程序中的逻辑流数。</summary>
      <returns>返回 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver">
      <summary>Provides method for resolving protocol.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor(System.Version,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
      <param name="min">The minimum version of the protocol to resolve.</param>
      <param name="max">The maximum version of the protocol to resolve.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.Resolve(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Resolves the protocol in the specified SignalR request.</summary>
      <param name="request">The request to resolve.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Purposes">
      <summary>指定目的常量。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.ConnectionToken">
      <summary>ConnectionToken 常量。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.Groups">
      <summary>Groups 常量。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType">
      <summary>指定服务器命令。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType.RemoveConnection">
      <summary>RemoveConnection 命令。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager">
      <summary>默认 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager" /> 实现。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.ServerId">
      <summary>获取或设置服务器的 ID。</summary>
      <returns>服务器的 ID。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonValue">
      <summary>表示一个 JSON 值。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.CanConvertTo(System.Type)">
      <summary>将参数值转换为指定的 <see cref="T:System.Type" />。</summary>
      <returns>转换后的参数值。</returns>
      <param name="type">要将参数转换成的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.ConvertTo(System.Type)">
      <summary>将参数值转换为指定的 <see cref="T:System.Type" />。</summary>
      <returns>转换后的参数值。</returns>
      <param name="type">要将参数转换成的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonWritable">
      <summary>实现可处理自己的到 JSON 的序列化。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonWritable.WriteJson(System.IO.TextWriter)">
      <summary>通过 <see cref="T:System.IO.TextWriter" /> 将自身序列化为 JSON。</summary>
      <param name="writer">接收 JSON 序列化对象的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的扩展。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>将 JSON 反序列化为 .NET 对象。</summary>
      <returns>从 JSON 字符串反序列化后的对象。</returns>
      <param name="serializer">序列化程序</param>
      <param name="jsonBuffer">要反序列化的 JSON 缓冲区</param>
      <param name="encoding">要使用的编码。</param>
      <typeparam name="T">要反序列化的对象的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.String)">
      <summary>将 JSON 反序列化为 .NET 对象。</summary>
      <returns>从 JSON 字符串反序列化后的对象。</returns>
      <param name="serializer">序列化程序</param>
      <param name="json">要反序列化的 JSON</param>
      <typeparam name="T">要反序列化的对象的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Serialize(Newtonsoft.Json.JsonSerializer,System.Object,System.IO.TextWriter)">
      <summary>将指定的对象序列化为 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="serializer">JSON 序列化程序</param>
      <param name="value">要序列化的对象</param>
      <param name="writer">要将对象序列化为的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Stringify(Newtonsoft.Json.JsonSerializer,System.Object)">
      <summary>将指定的对象序列化为 JSON 字符串。</summary>
      <returns>对象的 JSON 字符串表示形式。</returns>
      <param name="serializer">序列化程序</param>
      <param name="value">要序列化的对象。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonUtility">
      <summary> 常见 JSON 操作的帮助器类。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CamelCase(System.String)">
      <summary>将指定的名称转换为混合大小写格式。</summary>
      <returns>指定的 <paramref name="name" /> 的混合大小写格式值。</returns>
      <param name="name">要转换的值。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializer">
      <summary>使用默认设置创建一个 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。</summary>
      <returns>新建的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializerSettings">
      <summary>创建默认的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 实例。</summary>
      <returns>新建的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateJsonpCallback(System.String,System.String)">
      <summary>创建 JSONP 回调。</summary>
      <returns>表示回调的 <see cref="T:System.String" />。</returns>
      <param name="callback">要创建的回调。</param>
      <param name="payload">负载。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JavaScriptMimeType">
      <summary>获取 Javascript 的 MIME 类型。</summary>
      <returns>Javascript 的 MIME 类型。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JsonMimeType">
      <summary>获取此 JSON 实用工具的 MIME 类型。</summary>
      <returns>此 JSON 实用工具的 MIME 类型。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Command">
      <summary>表示结合 SignalR 消息使用的命令。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Command.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.Command" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.CommandType">
      <summary>获取或设置命令的类型。</summary>
      <returns>命令的类型。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Id">
      <summary>获取或设置命令标识符。</summary>
      <returns>命令标识符。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Value">
      <summary>获取或设置命令值。</summary>
      <returns>命令值。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.WaitForAck">
      <summary>获取或设置命令在执行之前是否要等待认证。</summary>
      <returns>如果命令在执行之前要等待认证，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.CommandType">
      <summary>枚举连接消息的命令。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Abort">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.AddToGroup">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Disconnect">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Initializing">
      <summary>指定要初始化连接的命令。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.RemoveFromGroup">
      <summary />
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.IMessageBus">
      <summary>提供用于从 SignalR 消息总线发布和订阅消息的方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>为消息总线的订阅者建立主题订阅。</summary>
      <returns>订阅的状态。</returns>
      <param name="subscriber">订阅者。</param>
      <param name="cursor">表示适用于订阅的读取光标。</param>
      <param name="callback">回调函数。</param>
      <param name="maxMessages">消息缓冲区的大小。</param>
      <param name="state">回调操作的状态。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscriber">
      <summary>提供有关 SignalR 消息总线订阅者的详细信息。</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyAdded"></member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyRemoved"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Identity"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Subscription">
      <summary>获取或设置订阅。</summary>
      <returns>订阅。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.WriteCursor">
      <summary>获取或设置写入光标。</summary>
      <returns>写入光标。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscription">
      <summary>提供执行工作和控制订阅状态的方法。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscription.Identity">
      <summary>获取或设置订阅的标识。</summary>
      <returns>订阅的标识。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.SetQueued">
      <summary>设置工作状态的订阅。</summary>
      <returns>如果订阅已设置为工作状态，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.UnsetQueued">
      <summary>将订阅设置为空闲状态。</summary>
      <returns>如果订阅已设置为空闲状态，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.Work">
      <summary>通过此订阅执行对已订阅消息的处理。</summary>
      <returns>表示对已订阅消息进行操作的任务。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.#ctor(System.String,System.UInt64,Microsoft.AspNet.SignalR.Messaging.MessageStore{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo" /> 类的新实例。</summary>
      <param name="key">与本地事件关联的键。</param>
      <param name="id">与键信息关联的标识符。</param>
      <param name="store">与本地事件键关联的消息存储。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Id">
      <summary>获取或设置与键信息关联的标识符。</summary>
      <returns>与键信息关联的标识符。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Key">
      <summary>获取或设置与本地事件关联的键。</summary>
      <returns>与本地事件关联的键。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.MessageStore">
      <summary>获取键的消息。</summary>
      <returns>键的消息。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Message">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.ArraySegment{System.Byte})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" /> 类的新实例。</summary>
      <param name="source">消息的源。</param>
      <param name="key">键消息。</param>
      <param name="value">消息的值。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.CommandId">
      <summary>获取或设置消息的命令标识符。</summary>
      <returns>消息的命令标识符。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Encoding">
      <summary>消息的编码</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Filter">
      <summary>获取或设置消息筛选器。</summary>
      <returns>消息筛选器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.GetString"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsAck">
      <summary>获取或设置一个值，该值指示消息是否为确认消息。</summary>
      <returns>如果消息是确认消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsCommand">
      <summary>获取一个值，该值指示消息是否为命令消息。</summary>
      <returns>如果消息是命令消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Key">
      <summary>获取或设置消息的键。</summary>
      <returns>消息的键。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.MappingId">
      <summary>负载 ID。只在扩展方案中使用</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.ReadFrom(System.IO.Stream)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Source">
      <summary>获取或设置消息的源。</summary>
      <returns>消息的源。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.StreamIndex">
      <summary>此消息的来源流索引。只在扩展方案中使用。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Value">
      <summary>获取或设置消息的值。</summary>
      <returns>消息的值。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.WaitForAck">
      <summary>获取或设置一个值，该值指示消息是否等待确认。</summary>
      <returns>如果消息等待确认，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.WriteTo(System.IO.Stream)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker">
      <summary>计划要为特定订阅完成的工作，有一个用于选择要处理计划工作的工作线程（线程池线程）数的算法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" /> 类的新实例。</summary>
      <param name="performanceCounterManager">性能计数器管理器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose">
      <summary>释放 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" /> 使用的所有资源。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" /> 使用的所有资源。</summary>
      <param name="disposing">如果要释放托管和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Schedule(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>对指定的订阅计划工作。</summary>
      <param name="subscription">要计划的订阅。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Trace">
      <summary>获取或设置代理的跟踪源。</summary>
      <returns>代理的跟踪源。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBus">
      <summary>表示 SignalR 的消息总线。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager,System.Int32)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Counters"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>为订阅者创建新订阅。</summary>
      <returns>新建的订阅。</returns>
      <param name="subscriber">订阅者。</param>
      <param name="cursor">表示适用于订阅的读取光标。</param>
      <param name="callback">回调函数。</param>
      <param name="messageBufferSize">消息缓冲区的大小。</param>
      <param name="state">回调操作的状态。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateTopic(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Save(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.ScheduleEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>为消息总线的订阅者建立主题订阅。</summary>
      <returns>订阅的状态。</returns>
      <param name="subscriber">订阅者。</param>
      <param name="cursor">表示适用于订阅的读取光标。</param>
      <param name="callback">回调函数。</param>
      <param name="maxMessages">消息缓冲区的大小。</param>
      <param name="state">回调操作的状态。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Topics"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Trace">
      <summary>获取用于跟踪代码执行的跟踪源。</summary>
      <returns>用于跟踪代码执行的跟踪源。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions">
      <summary>提供 SignalR 消息总线的扩展方法。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Action{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate``1(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{``0,Microsoft.AspNet.SignalR.Messaging.Message},``0)">
      <summary>枚举消息。</summary>
      <param name="messages">包含要枚举消息的列表。</param>
      <param name="filter">筛选被枚举的消息的方法。</param>
      <param name="onMessage">处理被枚举的每个消息的方法。</param>
      <param name="state">表示操作状态的对象。</param>
      <typeparam name="T">
        <paramref name="state" /> 参数的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Publish(Microsoft.AspNet.SignalR.Messaging.IMessageBus,System.String,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageResult">
      <summary>表示消息结果。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" /> 类的新实例。</summary>
      <param name="terminal">若要指示这是终端消息结果，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" /> 类的新实例。</summary>
      <param name="messages">与此 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" /> 关联的消息的数组。</param>
      <param name="totalCount">消息数组中填充的消息量。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Messages">
      <summary>获取与结果关联的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <returns>与结果关联的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Terminal">
      <summary>获取或设置一个值，该值指示这是否为终端消息结果。</summary>
      <returns>如果这是终端消息结果，则为 true；否则为 false。</returns>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.MessageResult.TerminalMessage">
      <summary>指定这是否为终端消息结果。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.TotalCount">
      <summary>获取或设置消息数组中填充的消息量。</summary>
      <returns>消息数组中填充的消息量。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1">
      <summary>表示由环形缓冲区支持的消息存储。</summary>
      <typeparam name="T">存储中元素的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32)">
      <summary>使用指定容量初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" /> 类的新实例。</summary>
      <param name="capacity">存储的最小容量。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32,System.UInt32)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" /> 类的新实例。</summary>
      <param name="capacity">存储的最小容量。</param>
      <param name="offset">存储中第一条消息的偏移量。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.Add(`0)">
      <summary>将消息添加到存储，并返回新添加消息的 ID。</summary>
      <returns>新添加消息的 ID。</returns>
      <param name="message">要添加的消息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessageCount">
      <summary>获取存储中的消息数。</summary>
      <returns>存储中的消息数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessages(System.UInt64,System.Int32)">
      <summary>获取下一批消息，以指定的 ID 开头。</summary>
      <returns>下一批消息</returns>
      <param name="firstMessageId">第一条消息 ID。</param>
      <param name="maxMessages">要返回的消息的最大数目。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1">
      <summary>表示与消息存储关联的结果。</summary>
      <typeparam name="T">结果的类型。</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.#ctor(System.UInt64,System.ArraySegment{`0},System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1" /> 类的新实例。</summary>
      <param name="firstMessageId">第一条消息的标识符。</param>
      <param name="messages">与结果关联的消息。</param>
      <param name="hasMoreData">如果结果包含更多数据，则为 true；否则为 false。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.FirstMessageId">
      <summary>获取第一条消息的标识符。</summary>
      <returns>第一条消息的标识符。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.HasMoreData">
      <summary>获取结果是否包含更多数据。</summary>
      <returns>如果结果包含更多数据，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.Messages">
      <summary>获取与结果关联的消息。</summary>
      <returns>与结果关联的消息。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration">
      <summary>表示扩展消息总线实现的通用设置。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.DisableQueuing">
      <summary>当前已禁用排队。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.MaxQueueLength">
      <summary>获取或设置传出发送队列的最大长度。</summary>
      <returns>传出发送队列的最大长度。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.Id"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.LocalKeyInfo"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.ServerCreationTime"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore">
      <summary>Represents a scale out mapping store on SignalR messaging.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.Add(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})">
      <summary>Adds a new scaleout mapping store.</summary>
      <param name="id">The identifier.</param>
      <param name="message">The message.</param>
      <param name="localKeyInfo">The local key information.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.GetEnumerator(System.UInt64)">
      <summary>Gets the enumerator for the mapping store.</summary>
      <returns>The enumerator for the mapping store.</returns>
      <param name="id">The identifier.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.MaxMapping">
      <summary>Gets the maximum numbers of mapping for this instance.</summary>
      <returns>The maximum numbers of mapping for this instance.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage">
      <summary>Represents a message to the scaleout backplane.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
      <param name="messages">The messages from SignalR.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.FromBytes(System.Byte[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class from the specified data in bytes.</summary>
      <returns>The created instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" />.</returns>
      <param name="data">The data in bytes.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.Messages">
      <summary>Gets or sets the messages from SignalR.</summary>
      <returns>The messages from SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ServerCreationTime">
      <summary>Gets or sets the time the message was created on the origin server.</summary>
      <returns>The time the message was created on the origin server.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ToBytes">
      <summary>Converts a <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</summary>
      <returns>The converted <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus">
      <summary>表示用于扩展消息总线实现的公共基类。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver,Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Close(System.Int32)">
      <param name="streamIndex">要关闭的流的索引。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnError(System.Int32,System.Exception)">
      <summary>关闭用于发送消息的指定队列，使所有发送操作异步失败。</summary>
      <param name="streamIndex">要关闭的流的索引。</param>
      <param name="exception">发生的错误。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnReceived(System.Int32,System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)">
      <summary>从底板收到负载时调用。任何时候只应有一个活动调用。</summary>
      <param name="streamIndex">流的 ID。</param>
      <param name="id">该流内的负载的 ID。</param>
      <param name="message">扩展消息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Open(System.Int32)">
      <param name="streamIndex">要打开的流的索引。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)">
      <summary>从扩展消息总线发布消息。</summary>
      <returns>表示消息发布操作的任务。</returns>
      <param name="message">要发布的消息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>从 SignalR 扩展消息总线发送消息。</summary>
      <returns>表示消息发送操作的任务。</returns>
      <param name="messages">要发送的消息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Int32,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.StreamCount">
      <summary>不能更改此实例生存期的流数。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore">
      <summary>Represents a message store that is backed by a ring buffer.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore" /> class.</summary>
      <param name="capacity">The minimum capacity of the store.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.Add(Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping)">
      <summary>Adds a message to the store and returns the ID of the newly added message.</summary>
      <returns>The ID of the newly added message.</returns>
      <param name="mapping">The mapping used in the store.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentCount">
      <summary>Gets or sets the number of message fragments in the store.</summary>
      <returns>The number of message fragments.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentSize">
      <summary>Gets or sets the size of the message fragment.</summary>
      <returns>The size of the message fragment.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessages(System.UInt64)">
      <summary>Gets the next batch of messages, beginning with the specified ID. </summary>
      <returns>The next batch of messages.</returns>
      <param name="firstMessageIdRequestedByClient">The first message ID requested by the client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessagesByMappingId(System.UInt64)">
      <summary>Gets the next batch of messages for the specified mapping ID.</summary>
      <returns>The next batch of messages.</returns>
      <param name="mappingId">The mapping ID.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.MaxMapping">
      <summary>Gets or sets the maximum mapping ID.</summary>
      <returns>The maximum mapping ID.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription">
      <summary>表示扩展的订阅。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription" /> 类的新实例。</summary>
      <param name="identity">订阅标识。</param>
      <param name="eventKeys">订阅的事件键。</param>
      <param name="cursor">写入光标。</param>
      <param name="streams">用于关联写入光标的流。</param>
      <param name="callback">订阅状态更改时执行的回调函数。</param>
      <param name="maxMessages">为此订阅分配的消息的最大数目。</param>
      <param name="counters">用于访问订阅的性能计数器的对象。</param>
      <param name="state">订阅的状态。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.BeforeInvoke(System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.WriteCursor(System.IO.TextWriter)">
      <summary>使用指定的文本编写器写入光标。</summary>
      <param name="textWriter">用于写入光标的文本编写器。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Subscription">
      <summary>表示 <see cref="T:Microsoft.AspNet.SignalR.Messaging.ISubscription" /> 类的实现。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.Subscription" /> 类的新实例。</summary>
      <param name="identity">订阅的标识。</param>
      <param name="eventKeys">包含订阅的事件键的列表。</param>
      <param name="callback">订阅状态更改时执行的回调函数。</param>
      <param name="maxMessages">为此订阅分配的消息的最大数目。</param>
      <param name="counters">用于访问订阅的性能计数器的对象。</param>
      <param name="state">订阅的状态。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.AddEvent(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.BeforeInvoke(System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Disposable">
      <summary>获取或设置用于释放订阅资源的方法。</summary>
      <returns>用于释放订阅资源的方法。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose(System.Boolean)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Identity"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Invoke(Microsoft.AspNet.SignalR.Messaging.MessageResult)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.MaxMessages"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.RemoveEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetEventTopic(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.UnsetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Work"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.WriteCursor(System.IO.TextWriter)">
      <summary>使用指定的文本编写器写入光标。</summary>
      <param name="textWriter">用于写入光标的文本编写器。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Topic">
      <summary>表示 SignalR 消息总线的主题。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.#ctor(System.UInt32,System.TimeSpan)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.Topic" /> 类的新实例。</summary>
      <param name="storeSize">消息存储的大小。</param>
      <param name="lifespan">主题生命期。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.AddSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>将指定的订阅添加到列表。</summary>
      <param name="subscription">要添加的订阅。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.IsExpired">
      <summary>获取一个值，该值指示主题是否已过期。</summary>
      <returns>如果主题已过期，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.LastUsed">
      <summary>获取或设置使用订阅的最晚时间。</summary>
      <returns>使用订阅的最晚时间。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.MarkUsed"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.RemoveSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>从列表中删除指定的订阅。</summary>
      <param name="subscription">要删除的订阅。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Store">
      <summary>获取或设置消息存储。</summary>
      <returns>消息存储。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.SubscriptionLock">
      <summary>获取或设置用于锁定主题的对象。</summary>
      <returns>用于锁定主题的对象。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Subscriptions">
      <summary>获取或设置包含主题订阅的列表。</summary>
      <returns>包含主题订阅的列表。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup">
      <summary>表示用作查找的主题的集合。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Clear">
      <summary>从集合中移除所有主题。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.ContainsKey(System.String)">
      <summary>确定集合中是否包含具有指定键的主题。</summary>
      <returns>如果集合中包含具有指定键的主题，则为 true；否则为 false。</returns>
      <param name="key">主题的键。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Count">
      <summary>获取集合中所有（一般和组）主题的数量。</summary>
      <returns>集合中所有（一般和组）主题的数量。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetEnumerator">
      <summary>获取循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetOrAdd(System.String,System.Func{System.String,Microsoft.AspNet.SignalR.Messaging.Topic})">
      <summary>通过使用指定的函数向集合中添加主题（如果该键尚不存在）。</summary>
      <returns>针对指定的键生成的主题。</returns>
      <param name="key">要添加的主题的键。</param>
      <param name="factory">用于生成键所对应的主题的函数。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Item(System.String)">
      <summary>获取具有指定键的主题。</summary>
      <returns>如果找到，则为具有指定键的主题；如果找不到主题，则为 null。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryGetValue(System.String,Microsoft.AspNet.SignalR.Messaging.Topic@)">
      <summary>尝试从集合中获取具有指定键的主题。</summary>
      <returns>如果找到了该键，则为 true；否则为 false。</returns>
      <param name="key">要获取的键。</param>
      <param name="topic">此方法返回时，将包含检索到的主题。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryRemove(System.String)">
      <summary>尝试从集合中移除并返回具有指定键的主题。</summary>
      <returns>已移除的主题。</returns>
      <param name="key">要移除的主题的键。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerRequest">
      <summary>表示服务器请求。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerRequest" /> 类的新实例。</summary>
      <param name="environment">环境。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Cookies">
      <summary>获取与服务器关联的 Cookie。</summary>
      <returns>与服务器关联的 Cookie。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Environment"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Headers">
      <summary>获取与请求关联的标头。</summary>
      <returns>与请求关联的标头。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.LocalPath"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.QueryString">
      <summary>获取服务器查询字符串变量的集合。</summary>
      <returns>服务器查询字符串变量的集合。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.ReadForm"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Url">
      <summary>获取有关当前请求的 URL 的信息。</summary>
      <returns>包含有关当前请求的 URL 信息的 <see cref="T:System.Uri" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.User">
      <summary>获取此服务器的用户。</summary>
      <returns>此服务器的用户。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerResponse">
      <summary>表示响应请求时发送的服务器反馈。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerResponse" /> 类的新实例。</summary>
      <param name="environment">环境。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.CancellationToken">
      <summary>获取与响应关联的取消标记。</summary>
      <returns>与响应关联的取消标记。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.ContentType">
      <summary>获取或设置与响应关联的内容类型。</summary>
      <returns>与响应关联的内容类型。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Flush">
      <summary>刷新此实例。</summary>
      <returns>刷新的实例。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Write(System.ArraySegment{System.Byte})">
      <summary>使用关联的数组段写入响应。</summary>
      <param name="data">数组段。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware">
      <summary>Represents the middleware used by the hub dispatcher.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware">
      <summary>表示持久连接的中间件。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager">
      <summary>表示提供用于跟踪代码执行的属性的接口。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Item(System.String)">
      <summary>获取具有源的指定名称的 <see cref="T:System.Diagnostics.TraceSource" />。</summary>
      <returns>具有源的指定名称的 <see cref="T:System.Diagnostics.TraceSource" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Switch">
      <summary>获取用于控制代码执行和调试输出的跟踪的开关。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SourceSwitch" /> 对象。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.TraceManager">
      <summary>提供可用于跟踪代码执行的属性。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Tracing.TraceManager" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor(System.Diagnostics.TextWriterTraceListener)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Item(System.String)">
      <summary>获取具有源的指定名称的 <see cref="T:System.Diagnostics.TraceSource" />。</summary>
      <returns>具有源的指定名称的 <see cref="T:System.Diagnostics.TraceSource" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Switch">
      <summary>获取用于控制代码执行和调试输出的跟踪的开关。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SourceSwitch" /> 对象。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport">
      <summary>表示永久帧传输。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport" /> 类的新实例。</summary>
      <param name="context">主机上下文。</param>
      <param name="resolver">依赖关系解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>初始化响应对象。</summary>
      <returns>用于表示初始化响应操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="connection">传输连接。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.KeepAlive">
      <summary>保持连接的活动状态。</summary>
      <returns>用于表示保持活动操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.OutputWriter">
      <summary>获取用于编写输出流上下文响应的 HTML 文本编写器。</summary>
      <returns>用于编写输出流上下文响应的 HTML 文本编写器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>发送指定的上下文响应。</summary>
      <returns>用于表示发送操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="response">要发送的响应。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> 类的新实例。</summary>
      <param name="context">主机上下文。</param>
      <param name="resolver">依赖关系解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> 类的新实例。</summary>
      <param name="context">主机上下文。</param>
      <param name="jsonSerializer">jsonSerializer。</param>
      <param name="heartbeat">传输检测信号。</param>
      <param name="performanceCounterWriter">性能计数器编写器。</param>
      <param name="traceManager">跟踪管理器。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Connected">
      <summary>获取或设置 <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> 的连接函数。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> 的连接函数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>提供传输的排队操作。</summary>
      <returns>传输的排队操作。</returns>
      <param name="writeAsync">异步写入。</param>
      <param name="state">状态对象。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializePersistentState">
      <summary>初始化永久传输的持久状态。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>初始化永久传输的连接响应。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="connection">传输连接。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.JsonSerializer">
      <summary>获取永久传输的 JsonSerializer。</summary>
      <returns>永久传输的 JsonSerializer。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.LastMessageId">
      <summary>获取永久传输的最后一个消息 ID。</summary>
      <returns>永久传输的最后一个消息 ID。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSending(System.String)">
      <summary>提供发送传输的负载。</summary>
      <param name="payload">字符串负载。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSendingResponse(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>提供发送方法的响应。</summary>
      <param name="response">连接的响应。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>提供处理请求的连接。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="connection">传输连接。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequestCore(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>提供请求来处理传输的连接。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="connection">传输连接。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Received">
      <summary>获取或设置一个函数来接收永久传输。</summary>
      <returns>要接收永久传输的函数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Reconnected">
      <summary>获取或设置永久传输的重新连接的函数。</summary>
      <returns>永久传输的重新连接的函数。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>向永久传输的连接发送响应。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="response">持久响应。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(System.Object)">
      <summary>将对象发送到永久传输。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="value">要发送的值。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.TransportConnected">
      <summary>获取或设置 <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> 的连接的传输。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" /> 的连接的传输。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITrackingConnection">
      <summary> 表示可以由 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" /> 跟踪的连接。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary> 为连接应用新状态。</summary>
      <param name="states">
        <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates" /> 枚举的值之一。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.CancellationToken"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectionId"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectTask"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Disconnect"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.DisconnectThreshold"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.End"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsTimedOut"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.KeepAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.SupportsKeepAlive"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Timeout"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Url"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransport">
      <summary>表示进行通信的传输</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Connected">
      <summary>获取或设置在初始连接连接到传输时调用的回调。</summary>
      <returns>返回 <see cref="T:System.Func`1" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.ConnectionId">
      <summary>获取或设置传输的连接 ID。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Disconnected">
      <summary>获取或设置在传输断开连接时调用的回调。</summary>
      <returns>返回 <see cref="T:System.Func`1" />。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>处理为此传输指定的 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" />。</summary>
      <returns>传输处理完连接时将完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="connection">要处理的 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" />。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Received">
      <summary>获取或设置在传输接收数据时调用的回调。</summary>
      <returns>返回 <see cref="T:System.Func`2" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Reconnected">
      <summary>获取或设置在传输重新连接时调用的回调。</summary>
      <returns>返回 <see cref="T:System.Func`1" />。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.Send(System.Object)">
      <summary>通过传输发送数据。</summary>
      <returns>发送完成时将完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="value">要发送的值。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.TransportConnected">
      <summary>获取或设置在传输进行连接时调用的回调。</summary>
      <returns>返回 <see cref="T:System.Func`1" />。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection">
      <summary>表示连接的传输。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>从传输接收订阅数据。</summary>
      <returns>传输的订阅数据。</returns>
      <param name="messageId">订阅的消息 ID。</param>
      <param name="callback">处理所接收消息的方法。</param>
      <param name="maxMessages">消息缓冲区大小。</param>
      <param name="state">传输连接的状态。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat">
      <summary>管理连接状态的跟踪。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>将新连接添加到受跟踪连接列表。</summary>
      <returns>所替换的连接（如果有）。</returns>
      <param name="connection">要添加的连接。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.GetConnections">
      <summary>获取被跟踪的连接的列表。</summary>
      <returns>连接的列表。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>将现有连接标记为活动。</summary>
      <param name="connection">要标记的连接。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>从受跟踪连接列表中删除连接。</summary>
      <param name="connection">要删除的连接。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportManager">
      <summary>管理连接的传输。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>获取指定 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> 的指定传输。</summary>
      <returns>指定的 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> 的 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" />。</returns>
      <param name="hostContext">当前请求的 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.SupportsTransport(System.String)">
      <summary>确定是否支持指定的传输。</summary>
      <returns>如果支持该传输，则为 True；否则为 False。</returns>
      <param name="transportName">要测试的传输的名称。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport" /> 类的新实例。</summary>
      <param name="context">主机上下文。</param>
      <param name="resolver">依赖关系解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Connected">
      <summary>获取或设置连接的函数。</summary>
      <returns>连接的函数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.DisconnectThreshold">
      <summary>获取断开连接阈值。</summary>
      <returns>断开连接阈值。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.IsConnectRequest">
      <summary>获取一个值，该值指示传输是否为连接请求。</summary>
      <returns>如果传输为连接请求，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>处理连接请求。</summary>
      <returns>表示请求操作的任务。</returns>
      <param name="connection">要处理的连接。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Received">
      <summary>获取或设置接收的函数。</summary>
      <returns>接收的函数。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Reconnected">
      <summary>获取或设置重新连接的传输。</summary>
      <returns>重新连接传输的任务。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>发送传输的响应。</summary>
      <returns>表示响应发送操作的任务。</returns>
      <param name="response">要发送的响应。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(System.Object)">
      <summary>发送具有给定值的长轮询传输。</summary>
      <returns>表示长轮询传输发送操作的任务。</returns>
      <param name="value">值。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.SupportsKeepAlive">
      <summary>获取一个指示传输是否支持保持活动的值。</summary>
      <returns>如果传输支持保持活动，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.TransportConnected">
      <summary>获取或设置连接的传输。</summary>
      <returns>连接传输的任务。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse">
      <summary> 表示对连接的响应。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor(System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{System.IO.TextWriter})">
      <summary>创建 <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> 的新实例。</summary>
      <param name="exclude">用于确定是否应将消息写入客户端的筛选器。</param>
      <param name="writeCursor">光标写入器。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Aborted">
      <summary>获取或设置一个值，指示是否已强行关闭连接。</summary>
      <returns>如果已强行关闭连接，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Disconnect">
      <summary>获取或设置一个值，该值指示连接是否接收断开连接命令。</summary>
      <returns>如果连接接收断开连接命令，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.GroupsToken">
      <summary>获取或设置表示组列表的签名令牌。</summary>
      <returns>令牌组。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Initializing">
      <summary>如果连接正在进行初始化，则为 true</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.LongPollDelay">
      <summary>获取或设置长轮询客户端在未收到任何数据的情况下重新建立连接之前应等待的时间。</summary>
      <returns>长轮询客户端在未收到任何数据的情况下重新建立连接之前应等待的时间。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Messages">
      <summary>获取或设置要发送到接收连接的消息列表。</summary>
      <returns>要发送到接收连接的消息列表。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Microsoft#AspNet#SignalR#Json#IJsonWritable#WriteJson(System.IO.TextWriter)">
      <summary>为提高性能，只使用 Json.NET 的 JsonTextWriter 来序列化针对 JSON 的 <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> 的必要组件。</summary>
      <param name="writer">接收 JSON 序列化的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Reconnect">
      <summary>如果客户端应尝试重新连接，则为 True。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Terminal"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.TotalCount">
      <summary>获取或设置发送到接收连接的消息的总数。</summary>
      <returns>发送到接收连接的消息的总数。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport">
      <summary>提供传输以从 SignalR 的服务器发送事件。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" /> 类的新实例。</summary>
      <param name="context">主机上下文。</param>
      <param name="resolver">IDependency 解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> 的响应。</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> 的初始化响应。</returns>
      <param name="connection">传输连接的初始化。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.KeepAlive">
      <summary>返回保持活动方法以建立与 Internet 资源的持久连接。</summary>
      <returns>用于与 Internet 资源建立持久连接的保持活动方法。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>向 <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" /> 发送持久响应。</summary>
      <returns>要发送到 <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" /> 的持久响应。</returns>
      <param name="response">持久响应。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates">
      <summary>枚举 TransportConnectionState 的特性。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Aborted">
      <summary>连接状态为已中止。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Added">
      <summary>连接状态为已添加。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disconnected">
      <summary>连接状态为已断开连接。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.DisconnectMessageReceived">
      <summary>状态为已收到断开连接消息。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disposed">
      <summary>连接状态为已释放。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.HttpRequestEnded">
      <summary>连接状态为 HTTP 请求已结束。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.None">
      <summary>无连接状态。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.QueueDrained">
      <summary>连接状态为已排放队列。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Removed">
      <summary>连接状态为已删除。</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Replaced">
      <summary>连接状态为已替换。</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> 类的新实例。</summary>
      <param name="context">主机上下文。</param>
      <param name="heartbeat">传输检测信号。</param>
      <param name="performanceCounterManager">性能计数器管理器。</param>
      <param name="traceManager">跟踪管理器。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort">
      <summary>中止 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> 当前任务处理。</summary>
      <returns>要针对 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> 中止的当前任务处理。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort(System.Boolean)">
      <summary>中止 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> 当前任务处理。</summary>
      <returns>要针对 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> 中止的当前任务处理。</returns>
      <param name="clean">指示是否清理已中止处理中的所有任务。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary>应用断开连接基础的传输连接状态。</summary>
      <param name="states">传输连接状态。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CancellationToken">
      <summary>获取表示连接生存期的取消标记。</summary>
      <returns>表示连接生存期的取消令牌。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Connection">
      <summary>获取或设置传输的断开连接基础的传输连接。</summary>
      <returns>传输的断开连接基础的传输连接。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionEndToken">
      <summary>获取连接来结束此令牌的操作。</summary>
      <returns>结束此令牌操作的连接。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionId">
      <summary>获取或设置连接的 ID。</summary>
      <returns>包含连接的 ID 的字符串。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectTask"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Context">
      <summary>获取与传输断开连接基础关联的主机上下文。</summary>
      <returns>与传输断开连接基础关联的主机上下文。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CreateResponseWriter">
      <summary>表示用于为传输断开连接基础创建响应的编写器。</summary>
      <returns>用于为传输断开连接基础创建响应的编写器。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnect">
      <summary>导致连接断开。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnected">
      <summary>获取或设置连接传输的断开连接属性。</summary>
      <returns>连接传输的断开连接属性。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.DisconnectThreshold">
      <summary>获取在连接终止后触发断开连接操作之前要等待的时间跨度。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose">
      <summary>释放由 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> 类的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> 类使用的非托管资源并选择性地释放托管资源。</summary>
      <param name="disposing">若为 true，则同时释放托管资源和非托管资源；若为 false，则仅释放非托管资源</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.End">
      <summary>终止连接。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Threading.Tasks.Task})">
      <summary>表示结束队列操作的对象。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="writeAsync">异步写入。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>表示结束队列操作的对象。</summary>
      <returns>表示队列操作结束的对象。</returns>
      <param name="writeAsync">异步写入。</param>
      <param name="state">状态。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Heartbeat">
      <summary>获取传输检测信号来管理连接的跟踪状态。</summary>
      <returns>用于管理连接的跟踪状态的传输检测信号。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.HostShutdownToken"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IncrementErrors">
      <summary>增加传输断开连接基础的错误数量。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.InitializePersistentState">
      <summary>初始化传输断开连接基础的持久状态。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAbortRequest">
      <summary>获取一个值，该值表示连接发出中止请求。</summary>
      <returns>如果连接发出中止请求，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAlive">
      <summary>获取一个表示连接是否处于活动状态的值。</summary>
      <returns>如果连接处于活动状态，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsConnectRequest">
      <summary>获取一个表示连接是否发出请求的值。</summary>
      <returns>如果连接发出请求，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsTimedOut">
      <summary>获取一个表示连接是否超时的值。</summary>
      <returns>如果连接已超时，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.KeepAlive">
      <summary>通过连接发送保持活动 ping。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.OutputWriter">
      <summary>获取可以写入连续的字符系列的输出编写器。</summary>
      <returns>可以写入连续的字符系列的输出编写器。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.SupportsKeepAlive">
      <summary>获取一个表示传输是否支持保持活动的值。</summary>
      <returns>如果传输支持保持活动，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Timeout">
      <summary>导致连接超时。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Trace">
      <summary>获取源来跟踪代码的执行，并将跟踪消息与其源关联。</summary>
      <returns>用于跟踪代码执行的源，并将跟踪消息与其源关联。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Url">
      <summary>获取连接的 URI。</summary>
      <returns>连接的 URI。</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat">
      <summary>表示 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" /> 的默认实现。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> 类的新实例。</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>将新连接添加到受跟踪连接列表。</summary>
      <param name="connection">要添加的连接。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose">
      <summary>释放由 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> 类的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> 类使用的非托管资源并选择性地释放托管资源。</summary>
      <param name="disposing">若为 true，则同时释放托管资源和非托管资源；若为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.GetConnections">
      <summary>获取被跟踪的连接的列表。</summary>
      <returns>连接的列表。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>将现有连接标记为活动。</summary>
      <param name="connection">要标记的连接。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>从受跟踪连接列表中删除连接。</summary>
      <param name="connection">要删除的连接。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportManager">
      <summary>默认的 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportManager" /> 实现。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportManager" /> 类的新实例。</summary>
      <param name="resolver">默认的 <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>获取指定 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> 的指定传输。</summary>
      <returns>指定的 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> 的 <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" />。</returns>
      <param name="hostContext">当前请求的 <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Register(System.String,System.Func{Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransport})">
      <summary>将新传输添加到受支持传输的列表。</summary>
      <param name="transportName">指定的传输。</param>
      <param name="transportFactory">指定的传输的工厂方法。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Remove(System.String)">
      <summary>从受支持传输的列表中删除传输。</summary>
      <param name="transportName">指定的传输。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.SupportsTransport(System.String)">
      <summary>确定是否支持指定的传输。</summary>
      <returns>如果支持该传输，则为 True；否则为 False。</returns>
      <param name="transportName">要测试的传输的名称。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport">
      <summary>此处的内容将不会更新；请不要在此处添加材料。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>初始化 <see cref="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport" /> 类的新实例。</summary>
      <param name="context">主机上下文。</param>
      <param name="resolver">依赖关系解析程序。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CancellationToken">
      <summary>获取用于传输的取消令牌。</summary>
      <returns>用于传输的取消令牌。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CreateResponseWriter"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.IsAlive">
      <summary>获取一个指示传输是否活动的值。</summary>
      <returns>如果传输处于活动状态，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.KeepAlive">
      <summary>保持传输的活动状态。</summary>
      <returns>保持传输的活动状态的任务。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>处理连接请求。</summary>
      <returns>表示连接请求操作的任务。</returns>
      <param name="connection">连接。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>发送 Web 套接响应。</summary>
      <returns>表示响应发送操作的任务。</returns>
      <param name="response">要发送的响应。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(System.Object)">
      <summary>发送传输的值。</summary>
      <returns>表示传输值发送操作的任务。</returns>
      <param name="value">要发送的值。</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler">
      <summary>表示用于管理 SignalR Web 套接字的实例。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.#ctor(System.Nullable{System.Int32})"></member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Close">
      <summary>关闭此实例。</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Error">
      <summary>获取或设置在处理 Web 套接字期间发生的错误。</summary>
      <returns>在处理 Web 套接字期间发生的错误。</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.MaxIncomingMessageSize">
      <summary>获取最大传入消息大小。</summary>
      <returns>最大传入消息大小。</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnClose(System.Boolean)">
      <summary>当关闭此实例时发生。</summary>
      <param name="clean">如果要清理跟踪，则为 true。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnError">
      <summary>在执行处理程序操作期间发生错误时引发某个事件。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.Byte[])">
      <summary>当收到消息时引发某个事件。</summary>
      <param name="message">消息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.String)">
      <summary>当收到消息时引发某个事件。</summary>
      <param name="message">消息。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnOpen">
      <summary>当打开此实例时引发某个事件。</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.ProcessWebSocketRequestAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
      <summary>异步处理处理程序收到的请求。</summary>
      <returns>操作结果。</returns>
      <param name="webSocket">Web 套接字。</param>
      <param name="disconnectToken">断开连接令牌。</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Send(System.String)">
      <summary>发送与处理程序关联的消息。</summary>
      <returns>发送的消息。</returns>
      <param name="message">要发送的消息。</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.WebSocket">
      <summary>获取或设置 Web 套接字。</summary>
      <returns>Web 套接字。</returns>
    </member>
    <member name="T:Owin.ObsoleteOwinExtensions"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="T:Owin.OwinExtensions">
      <summary>表示 Owin 扩展的连接。</summary>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder)">
      <summary>将 SignalR 集线器映射到“/signalr”处的应用生成器管道。</summary>
      <returns>返回 <see cref="T:Owin.IAppBuilder" />。</returns>
      <param name="builder">应用程序生成器。</param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>将 SignalR 集线器映射到“/signalr”处的应用生成器管道。</summary>
      <returns>返回 <see cref="T:Owin.IAppBuilder" />。</returns>
      <param name="builder">应用程序生成器。</param>
      <param name="configuration">要使用的 <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String)">
      <summary>将指定的 SignalR <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 映射到指定路径处的应用生成器管道。</summary>
      <returns>返回 <see cref="T:Owin.IAppBuilder" />。</returns>
      <param name="builder">应用程序生成器。</param>
      <param name="path">  要映射 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的路径</param>
      <typeparam name="TConnection">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>将指定的 SignalR <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 映射到指定路径处的应用生成器管道。</summary>
      <returns>返回 <see cref="T:Owin.IAppBuilder" />。</returns>
      <param name="builder">应用程序生成器。</param>
      <param name="path">要映射持久连接的路径。</param>
      <param name="configuration">要使用的 <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
      <typeparam name="TConnection">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>将 SignalR 集线器映射到指定路径处的应用生成器管道。</summary>
      <returns>返回 <see cref="T:Owin.IAppBuilder" />。</returns>
      <param name="builder">应用程序生成器。</param>
      <param name="path">要映射 signalr 集线器的路径。</param>
      <param name="configuration">要使用的 <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>将指定的 <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 映射到指定路径处的应用生成器管道。</summary>
      <returns>返回 <see cref="T:Owin.IAppBuilder" />。</returns>
      <param name="builder">应用程序生成器。</param>
      <param name="path">要映射持久连接的路径。</param>
      <param name="connectionType">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型</param>
      <param name="configuration">要使用的 <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder)">
      <summary>将 SignalR 集线器添加到应用生成器管道中。</summary>
      <param name="builder">应用程序生成器。</param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder)">
      <summary>将指定的 SignalR <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 添加到应用生成器中。</summary>
      <param name="builder">应用程序生成器</param>
      <typeparam name="TConnection">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <param name="builder">应用程序生成器。</param>
      <param name="configuration">要使用的 <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
      <typeparam name="TConnection">将指定的 SignalR <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 添加到应用生成器中。</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>将 SignalR 集线器添加到应用程序生成器管道中。</summary>
      <param name="builder">应用程序生成器。</param>
      <param name="configuration">要使用的 <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /></param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>将指定的 SignalR <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 添加到应用生成器中。</summary>
      <param name="builder">应用程序生成器。</param>
      <param name="connectionType">
        <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> 的类型</param>
      <param name="configuration">要使用的 <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /></param>
    </member>
    <member name="T:System.Diagnostics.TraceSourceExtensions">
      <summary>Provides extension methods for used by SignalR.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace error message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace warning message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
  </members>
</doc>