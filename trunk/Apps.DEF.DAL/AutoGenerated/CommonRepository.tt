<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../Apps.Models/Common.ttinclude"#><#@ 
 output extension=".cs"#>
 <#
const string usingName = "DEF";
const string inputFile = @"../../Apps.Models/DB.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
    {
        if(entity.Name.StartsWith(usingName+"_"))
        {
            fileManager.StartNewFile(""+entity.Name + "Repository.cs");
#>
using Apps.Models;
using Apps.DAL;
using Apps.<#=usingName#>.IDAL;
using System;
namespace Apps.<#=usingName#>.DAL
{
	public partial class <#=entity.Name #>Repository:BaseRepository<<#=entity.Name #>>,I<#=entity.Name #>Repository,IDisposable
	{
	    public <#=entity.Name #>Repository(DBContainer db):base(db)
        {
        
        }
     
	}
<#
            EndNamespace(code);
}}        

fileManager.Process();

#>
