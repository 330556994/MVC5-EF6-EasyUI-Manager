//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.DEF.IDAL;
using Apps.Models.DEF;
namespace Apps.DEF.BLL
{
	public class Virtual_DEF_DefectBLL
	{
        [Dependency]
        public IDEF_DefectRepository m_Rep { get; set; }

		public virtual List<DEF_DefectModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<DEF_Defect> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.ItemID.Contains(queryStr)
								|| a.VerCode.Contains(queryStr)
								|| a.Code.Contains(queryStr)
								|| a.Title.Contains(queryStr)
								|| a.Creator.Contains(queryStr)
								
								|| a.Receiver.Contains(queryStr)
								
								
								|| a.Closer.Contains(queryStr)
								
								|| a.TestContent.Contains(queryStr)
								|| a.ResultContent.Contains(queryStr)
								|| a.Remark.Contains(queryStr)
								|| a.MessageId.Contains(queryStr)
								
								
								|| a.Processor.Contains(queryStr)
								
								
								|| a.CaseName.Contains(queryStr)
								
								
								
								|| a.Executor.Contains(queryStr)
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<DEF_DefectModel> CreateModelList(ref IQueryable<DEF_Defect> queryData)
        {

            List<DEF_DefectModel> modelList = (from r in queryData
                                              select new DEF_DefectModel
                                              {
													ItemID = r.ItemID,
													VerCode = r.VerCode,
													Code = r.Code,
													Title = r.Title,
													Creator = r.Creator,
													CrtDt = r.CrtDt,
													Receiver = r.Receiver,
													SendDt = r.SendDt,
													CloseState = r.CloseState,
													Closer = r.Closer,
													CloseDt = r.CloseDt,
													TestContent = r.TestContent,
													ResultContent = r.ResultContent,
													Remark = r.Remark,
													MessageId = r.MessageId,
													Sort = r.Sort,
													ProcessState = r.ProcessState,
													Processor = r.Processor,
													ProcessDt = r.ProcessDt,
													ErrorLevel = r.ErrorLevel,
													CaseName = r.CaseName,
													Complex = r.Complex,
													PStartDt = r.PStartDt,
													PEndDt = r.PEndDt,
													Executor = r.Executor,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, DEF_DefectModel model)
        {
            try
            {
			    DEF_Defect entity = m_Rep.GetById(model.ItemID);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new DEF_Defect(); 
				entity.ItemID = model.ItemID;
				entity.VerCode = model.VerCode;
				entity.Code = model.Code;
				entity.Title = model.Title;
				entity.Creator = model.Creator;
				entity.CrtDt = model.CrtDt;
				entity.Receiver = model.Receiver;
				entity.SendDt = model.SendDt;
				entity.CloseState = model.CloseState;
				entity.Closer = model.Closer;
				entity.CloseDt = model.CloseDt;
				entity.TestContent = model.TestContent;
				entity.ResultContent = model.ResultContent;
				entity.Remark = model.Remark;
				entity.MessageId = model.MessageId;
				entity.Sort = model.Sort;
				entity.ProcessState = model.ProcessState;
				entity.Processor = model.Processor;
				entity.ProcessDt = model.ProcessDt;
				entity.ErrorLevel = model.ErrorLevel;
				entity.CaseName = model.CaseName;
				entity.Complex = model.Complex;
				entity.PStartDt = model.PStartDt;
				entity.PEndDt = model.PEndDt;
				entity.Executor = model.Executor;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, DEF_DefectModel model)
        {
            try
            {
                DEF_Defect entity = m_Rep.GetById(model.ItemID);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.ItemID = model.ItemID;
				entity.VerCode = model.VerCode;
				entity.Code = model.Code;
				entity.Title = model.Title;
				entity.Creator = model.Creator;
				entity.CrtDt = model.CrtDt;
				entity.Receiver = model.Receiver;
				entity.SendDt = model.SendDt;
				entity.CloseState = model.CloseState;
				entity.Closer = model.Closer;
				entity.CloseDt = model.CloseDt;
				entity.TestContent = model.TestContent;
				entity.ResultContent = model.ResultContent;
				entity.Remark = model.Remark;
				entity.MessageId = model.MessageId;
				entity.Sort = model.Sort;
				entity.ProcessState = model.ProcessState;
				entity.Processor = model.Processor;
				entity.ProcessDt = model.ProcessDt;
				entity.ErrorLevel = model.ErrorLevel;
				entity.CaseName = model.CaseName;
				entity.Complex = model.Complex;
				entity.PStartDt = model.PStartDt;
				entity.PEndDt = model.PEndDt;
				entity.Executor = model.Executor;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual DEF_DefectModel GetById(string id)
        {
            if (IsExists(id))
            {
                DEF_Defect entity = m_Rep.GetById(id);
                DEF_DefectModel model = new DEF_DefectModel();
                              				model.ItemID = entity.ItemID;
				model.VerCode = entity.VerCode;
				model.Code = entity.Code;
				model.Title = entity.Title;
				model.Creator = entity.Creator;
				model.CrtDt = entity.CrtDt;
				model.Receiver = entity.Receiver;
				model.SendDt = entity.SendDt;
				model.CloseState = entity.CloseState;
				model.Closer = entity.Closer;
				model.CloseDt = entity.CloseDt;
				model.TestContent = entity.TestContent;
				model.ResultContent = entity.ResultContent;
				model.Remark = entity.Remark;
				model.MessageId = entity.MessageId;
				model.Sort = entity.Sort;
				model.ProcessState = entity.ProcessState;
				model.Processor = entity.Processor;
				model.ProcessDt = entity.ProcessDt;
				model.ErrorLevel = entity.ErrorLevel;
				model.CaseName = entity.CaseName;
				model.Complex = entity.Complex;
				model.PStartDt = entity.PStartDt;
				model.PEndDt = entity.PEndDt;
				model.Executor = entity.Executor;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
}
